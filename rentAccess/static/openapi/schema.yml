openapi: 3.0.2
info:
  title: '294 Internal API Documentation'
  version: '1'
  description: |

    ---
    ## Useful Links
      - [Current Database Schema](https://git.miem.hse.ru/yuiborodin)
      - [Current Backend API Functionality Schema](https://git.miem.hse.ru/yuiborodin)
      - [Current Workflow Schema](https://git.miem.hse.ru/yuiborodin)
      - [Backend Changelog](https://git.miem.hse.ru/yuiborodin)

    ---
    ## Conventions
    In this documentation file accepted conventions are as listed below. <br>
    Completed methods are marked as <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
    <br>Tested methods marked as <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
    <br>

    ---
    <h4 align="center"> Author: Yury Borodin </h4>
    <h5 align="center"> Gitlab: [yuiborodin](https://git.miem.hse.ru/yuiborodin)
    <br> VK: [borodin.yury](https://vk.com/borodin.yury)
    <br> Email: <a href="mailto:yuiborodin@miem.hse.ru">yuiborodin@miem.hse.ru</a></h5>
    ---
  contact:
    name: Urgent LockAndRent API Support
    email: api_support@lockandrent.ru
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://lockandrent.ru/
    description: main url for PRODUCTION USE
  - url: https://yuiborodin.xyz/
    description: main url for testing API
security:
  - bearerAuth: []
paths:
# AUTH PATHS
  /api/v1/auth/register/:
    post:
      operationId: createregistration
      description: |
        This method is used for account registration
        <br>
        <br><img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Completed"> <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Tested">
      requestBody:
        content:
          application/json:
            schema:
              properties:
                first_name:
                  type: string
                  writeOnly: true
                last_name:
                  type: string
                  writeOnly: true
                email:
                  type: string
                  writeOnly: true
                password:
                  type: string
                  writeOnly: true
                password2:
                  type: string
                  writeOnly: true
              required:
                - first_name
                - last_name
                - password
                - password2
      responses:
        '201':
          $ref: '#/components/responses/200_OK'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
        - AuthAPI
  /api/v1/auth/token/:
    post:
      operationId: createTokenObtainPair
      description: |
        Takes a set of user credentials and returns an access and refresh
        JSON web token pair to prove the authentication of those credentials.
        <br>
        <br><img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Completed"> <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Tested">
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
      responses:
        '200':
          $ref: '#/components/responses/200_OK'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
        - AuthAPI
  /api/v1/auth/token/refresh/:
    post:
      operationId: createTokenRefresh
      description: 'Takes a refresh type JSON web token and returns an access type
          JSON web

          token if the refresh token is valid.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
        - AuthAPI
  /api/v1/auth/token/verify/:
    post:
      operationId: createTokenVerify
      description: 'Takes a token and indicates if it is valid.  This view provides
          no

          information about a token''s fitness for a particular use.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
        - AuthAPI
  /api/v1/auth/logout/:
    post:
      description: |
        Takes a given refresh token and blacklists it.
        - Requires access token (isAuthenticated permission) passed with the request.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
      responses:
        '205':
          description: '205 Reset Content'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
        - AuthAPI
  /api/v1/auth/logoutall/:
    post:
      description: |
        Blacklists all tokens associated with the user that sent the request.
        - Requires access token (isAuthenticated permission) passed with the request.
      parameters: []
      responses:
        '205':
          description: '205 Reset Content'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
        - AuthAPI
# PROPERTY GROUPS
  /api/v1/property-groups/{group:id}/:
    get:
      operationId: retrieveGroup
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
        <br>
        This method is used for retrieving information about a
        particular group
      parameters:
      - name: group:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - GroupsAPI
    put:
      operationId: patchGroup
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
        <br>This method is used for updating information about a particular group.

      parameters:
      - name: group:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
        - GroupsAPI
    delete:
      operationId: destroyGroup
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
        <br>This method is used for delete action for a particular group.
      parameters:
      - name: group:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      responses:
        '204':
          $ref: '#/components/responses/204_Deleted'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - GroupsAPI
  /api/v1/property-groups/:
    get:
      operationId: listGroups
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
        <br>This method is used for retrieving a list of groups.

      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/200_OK_Groups_Paginated'
      tags:
      - GroupsAPI
    post:
      operationId: createGroup
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
        <br>This method is used for creating a group.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: ''
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - GroupsAPI
# PROPERTY GROUPS MEMBERS
  /api/v1/property-groups/{group:id}/members/{member:id}/:
    get:
      operationId: retrieveGroupMembers
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
        <br>
        This method is used for retrieving information about members of a particular group
      parameters:
      - name: group:id
        in: path
        required: true
        description: A unique integer value identifying the group.
        schema:
          type: string
      - name: member:id
        in: path
        required: true
        description: A unique integer value identifying the member.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - GroupsAPI.Members
    put:
      operationId: patchGroupMember
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
        <br>This method is used for updating information about a particular group member.

      parameters:
      - name: group:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      - name: member:id
        in: path
        required: true
        description: A unique integer value identifying the member.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
        - GroupsAPI.Members
    delete:
      operationId: destroyGroupMember
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
        <br>This method is used for delete action for a particular group member.
      parameters:
      - name: group:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      - name: member:id
        in: path
        required: true
        description: A unique integer value identifying the member.
        schema:
          type: string
      responses:
        '204':
          $ref: '#/components/responses/204_Deleted'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - GroupsAPI
  /api/v1/property-groups/{group:id}/members/:
    get:
      operationId: listGroupsMembers
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
        <br>This method is used for retrieving a list of group members.

      parameters:
      - name: group:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200_OK_Groups_Paginated'
      tags:
      - GroupsAPI.Members
    post:
      operationId: createGroupMember
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
        <br>This method is used for creating a group member.
      parameters:
      - name: group:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
          description: ''
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - GroupsAPI.Members

# PROPERTY GROUPS PROPERTIES
  /api/v1/property-groups/{group:id}/properties/:
    get:
      operationId: listGroupsProperties
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
        <br>This method is used for retrieving a list of group properties.

      parameters:
      - name: group:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200_OK_Property_Member_Paginated'
      tags:
      - GroupsAPI.Properties
    post:
      operationId: createGroupProperties
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
        <br>This method is used for creating a group property member (adding a property to a group).
      parameters:
      - name: group:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyAddToGroup'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyGroupMembership'
          description: ''
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - GroupsAPI.Properties
# PROPERTIES
  /api/v1/properties/{properties:id}/:
    get:
      operationId: retrieveProperty
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
        <br>
        This method is used for retrieving information about a
        particular property
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI
    patch:
      operationId: patchProperty
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
        <br>This method is used for retrieving information about a particular property.
        <br>Updatable fields:
          - `title`
          - `body`
          - `price`
          - `active`
          - `property_type`
          - `visibility`
          - `property_address`
          - `availability`
          - `client_greeting_message`
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
        - PropertiesAPI
    put:
      operationId: updateProperty
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
        <br>This method is used for retrieving information about a particular property.
        <br>Updatable fields:
          - `title`
          - `body`
          - `price`
          - `active`
          - `property_type`
          - `visibility`
          - `availability`
          - `property_address`
          - `client_greeting_message`
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI
    delete:
      operationId: destroyProperty
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
        <br>This method is used for delete action for a particular property.
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      responses:
        '204':
          $ref: '#/components/responses/204_Deleted'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI
  /api/v1/properties/:
    get:
      operationId: listPropertys
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
        <br>This method is used for retrieving a list of properties.
        <br> All properties with visibility level of 100 will be shown here.
        <br>*Search (filtering) functionality will be added soon.*
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/200_OK_Properties_Paginated'
      tags:
      - PropertiesAPI
    post:
      operationId: createProperty
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
        <br>This method is used for creating a property.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
          description: ''
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI
# PROPERTIES BOOKINGS PATHS
  /api/v1/properties/bookings/:
    get:
      operationId: listPropertiesBooking
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
        This method is used for retrieving a list of *incoming* bookings for all properties of the
        authenticaeted user.
        <br> In order to access the authenticated user's *outcoming* bookings, use
        `user:bookings` scope.
        <br> *Search (filtering) functionality is not yet supported.*
        <br>

      responses:
        '200':
          $ref: '#/components/responses/200_OK_Bookings_Paginated'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401

          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - Properties.BookingsAPI

  /api/v1/properties/{properties:id}/bookings/:
    get:
      operationId: listPropertyBooking
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
        This method is used for retrieving a list of bookings for the property with `properties:id`.
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200_OK_Bookings_Paginated'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - Properties.BookingsAPI
    post:
      operationId: createPropertyBooking
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
        <br>Use this endpoint in order to create a booking for a particular property.
        <br> *This endpoint could be used by any authenticated user. If the owner of the property
        doest the booking, the status is automatically set to `ACCEPTED`*.
        <br> *The `AWAITING` and `DECLINED` statuses are awailable only if the
        property has `requires_additional_confirmation` parameter set to `true`.*

        __Note that if the booking is being created for the property with
        daily type of bookings then there's no need to provide the time and
        the timezone. Timezone offset is optional.__


        __Cliend email is needed only if the owner creates the booking, otherwise the email of the current auth user is used.__

        Extended docs: [Gitlab](https://git.miem.hse.ru/294/web-294/-/wikis/API/%D0%A0%D0%B5%D1%81%D1%83%D1%80%D1%81%D1%8B/%D0%91%D1%80%D0%BE%D0%BD%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-%D0%B1%D1%80%D0%BE%D0%BD%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
          description: ''
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
        '403':
          $ref: '#/components/responses/403_Forbidden'
      tags:
      - Properties.BookingsAPI
  /api/v1/properties/{properties:id}/bookings/{bookings:id}:
    get:
      operationId: retrievePropertyBooking
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        This method is used for retrieving information about a
        particular property
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      - name: bookings:id
        in: path
        required: true
        description: A unique integer value identifying the booking.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - Properties.BookingsAPI
    put:
      operationId: updatePropertyBooking
      description: ''
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      - name: bookings:id
        in: path
        required: true
        description: A unique integer value identifying the booking.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - Properties.BookingsAPI
    delete:
      operationId: destroyPropertyBooking
      description: ''
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      - name: bookings:id
        in: path
        required: true
        description: A unique integer value identifying the booking.
        schema:
          type: string
      responses:
        '204':
          $ref: '#/components/responses/204_Deleted'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'

      tags:
      - Properties.BookingsAPI
# PROPERTIES OWNERS PATHS
  /api/v1/properties/{properties:id}/owners/:
    get:
      operationId: listPropertyOwners
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        This method is used for retrieving information about owners of a
        particular property
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      responses:
        '200':
            $ref: '#/components/responses/200_OK_Owners_Paginated'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.OwnersAPI
    post:
      operationId: createPropertyOwner
      description: ''
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Owner'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Owner'
          description: ''
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.OwnersAPI
  /api/v1/properties/{properties:id}/owners/{owners:id}:
    get:
      operationId: retrievePropertyOwner
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        This method is used for retrieving information about a single owner of a particular property
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      - name: owners:id
        in: path
        required: true
        description: A unique integer value identifying the booking.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Owner'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.OwnersAPI
    put:
      operationId: updatePropertyOwner
      description: |
        This endpoint updates owner's permissions

        Note: this endpoint is available only if the authenticated user
        has one of these permissions:
          - `can_manage_owners`

          - `has_super_owner_permissions`
          - `is_creator`
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      - name: owners:id
        in: path
        required: true
        description: A unique integer value identifying the booking.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Owner'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Owner'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.OwnersAPI
    delete:
      operationId: destroyPropertyOwner
      description: ''
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      - name: owners:id
        in: path
        required: true
        description: A unique integer value identifying the booking.
        schema:
          type: string
      responses:
        '204':
          $ref: '#/components/responses/204_Deleted'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.OwnersAPI
# PROPERTIES IMAGES PATHS
  /api/v1/properties/{properties:id}/images/:
    put:
      operationId: putPropertyImages
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">

      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImageToUpload'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyImageToRepr'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Images
    delete:

      operationId: deletePropertyImages
      description: ''
      parameters:
      - name: images
        in: query
        required: true
        description: Images for deletion.
        schema:
          type: array
          items:
            type: integer
        style: form
        explode: false
        examples:
          oneId:
            summary: Example of a Image delete
            value: [5]   # ?ids=5
          multipleIds:
            summary: Example of multiple Image delete
            value: [1, 5, 7]   # ?ids=1,5,7
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string

      responses:
        '204':

          description: ''
        '403':
          $ref: '#/components/responses/403_Forbidden'
      tags:
      - PropertiesAPI.Images
  /api/v1/properties/{properties:id}/images/set_main_image/:
    put:
      operationId: putPropertyMainImage
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Images
# PROPERTIES LOCKS PATHS
  /api/v1/properties/{properties:id}/locks/:
    get:
      operationId: listPropertyLocks
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        <br>
        This method is used for retrieving information about locks of a
        particular property
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      responses:
        '200':
            $ref: '#/components/responses/200_OK_Locks_Paginated'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Locks
    post:
      operationId: createPropertyLock
      description: ''
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LockCreate'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lock'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Locks
  /api/v1/properties/{properties:id}/locks/{lock:id}:
    get:
      operationId: retrievePropertyLock
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">

        This method is used for retrieving information about a single lock of a particular property
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      - name: lock:id
        in: path
        required: true
        description: A unique integer value identifying the lock.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lock'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Locks
    put:
      operationId: updatePropertyLock
      description: |
        This endpoint updates lock's description

        Note: this endpoint is available only if the authenticated user
        has one of these permissions:
          - `can_manage_locks`

          - `has_super_owner_permissions`
          - `is_creator`
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      - name: lock:id
        in: path
        required: true
        description: A unique integer value identifying the booking.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Lock'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lock'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Locks
    delete:
      operationId: destroyPropertyLock
      description: ''
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      - name: lock:id
        in: path
        required: true
        description: A unique integer value identifying the booking.
        schema:
          type: string
      responses:
        '204':
          $ref: '#/components/responses/204_Deleted'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Locks
# PROPERTIES LOCKS CARDS PATHS
  /api/v1/properties/{properties:id}/locks/{lock:id}/cards/:
    get:
      operationId: listPropertyCards
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        <br>
        This method is used for retrieving information about cards of a lock of a
        particular property
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      - name: lock:id
        in: path
        required: true
        description: A unique integer value identifying the lock.
        schema:
          type: string
      responses:
        '200':
            $ref: '#/components/responses/200_OK_Cards_Paginated'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Locks.Cards
    post:
      operationId: createPropertyLockCard
      description: ''
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      - name: lock:id
        in: path
        required: true
        description: A unique integer value identifying the lock.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Card'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Locks.Cards
  /api/v1/properties/{properties:id}/locks/{lock:id}/cards/{card:id}/:
    get:
      operationId: retrievePropertyLockCard
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">

        This method is used for retrieving information about a single lock of a particular property
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      - name: lock:id
        in: path
        required: true
        description: A unique integer value identifying the lock.
        schema:
          type: string
      - name: card:id
        in: path
        required: true
        description: A unique integer value identifying the card.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Locks.Cards
    delete:
      operationId: destroyPropertyLockCard
      description: ''
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      - name: lock:id
        in: path
        required: true
        description: A unique integer value identifying the booking.
        schema:
          type: string
      - name: card:id
        in: path
        required: true
        description: A unique integer value identifying the card.
        schema:
          type: string
      responses:
        '204':
          $ref: '#/components/responses/204_Deleted'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Locks.Cards

# PROPERTIES LOCKS ACCESSES
  /api/v1/properties/{properties:id}/locks/{lock:id}/accesses/:
    get:
      operationId: retrievePropertyLockAccesses
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">

        This method is used for retrieving information about a single lock's accesses.
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      - name: lock:id
        in: path
        required: true
        description: A unique integer value identifying the lock.
        schema:
          type: string

      responses:
        '200':
          $ref: '#/components/responses/200_OK_Locks_Access_Paginated'

        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Locks.Accesses
# PROPERTIES LOCKS KEYS PATHS
  /api/v1/properties/{properties:id}/locks/{lock:id}/keys/:
    get:
      operationId: listPropertyKeys
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        <br>
        This method is used for retrieving information about cards of a lock of a
        particular property
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      - name: lock:id
        in: path
        required: true
        description: A unique integer value identifying the lock.
        schema:
          type: string
      responses:
        '200':
            $ref: '#/components/responses/200_OK_Keys_Paginated'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Locks.Keys
    post:
      operationId: createPropertyLockKey
      description: ''
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      - name: lock:id
        in: path
        required: true
        description: A unique integer value identifying the lock.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Key'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Locks.Keys
  /api/v1/properties/{properties:id}/locks/{lock:id}/keys/{key:id}/:
    get:
      operationId: retrievePropertyLockkey
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">

        This method is used for retrieving information about a single lock of a particular property
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      - name: lock:id
        in: path
        required: true
        description: A unique integer value identifying the lock.
        schema:
          type: string
      - name: key:id
        in: path
        required: true
        description: A unique integer value identifying the card.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Locks.Keys
    delete:
      operationId: destroyPropertyLockkey
      description: ''
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      - name: lock:id
        in: path
        required: true
        description: A unique integer value identifying the booking.
        schema:
          type: string
      - name: key:id
        in: path
        required: true
        description: A unique integer value identifying the card.
        schema:
          type: string
      responses:
        '204':
          $ref: '#/components/responses/204_Deleted'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Locks.Keys
# PROPERTIES AVAILABILITY PATHS
  /api/v1/properties/{properties:id}/available/:
    post:
      operationId: getPropertyDailyAvailability
      description: 'This endpoint is used to check whether the property can be booked. Returns 200 OK if can be, 409 Conflict if cannot be booked.'
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DailyAvailablePost'
      responses:
        '200':
          description: 'The property can be booked.'
        '409':
          description: 'The property cannot be booked.'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Availability

  /api/v1/properties/{properties:id}/available/slots/:
    get:
      operationId: getPropertyHourlySlotsAvailability
      description: |
        This endpoint is used to retrieve free slots for a date. Works only on properties with HOURLY booking type - otherwise returns 400.
        Slots can be empty with 200 OK, which means the property can be booked today, but there are no available slots.
        <br>
        IF THE PROPERTY IS NOT AVAILABLE AT THAT DAY - returns 409 with empty slots array.
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      - name: date
        in: query
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
          example: '2020-02-12'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SlotsList'
          description: 'The property can be booked and the slots are available.'
        '409':

          description: 'The property cannot be booked.'

        '404':
          $ref: '#/components/responses/404_Not_Found'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Availability
# USER PATHS
  /api/v1/user/:
    get:
      operationId: retrieveUser
      description:
        |
       <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope"><br>
        ---
        Retrieve information about the authenticated user with that endpoint. <br>
        <br>Note that the user can choose which email is shown with the `user:emails`
        scope. By default, the email with which the user signed up is shown.
        <br> Email visibility options are also shown in the `user:emails` scope.
      parameters:
        - in: query
          name: expand
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
          examples:
            oneId:
              summary: Example of a single parameter
              value: ["emails"]   # ?ids=5
            multipleIds:
              summary: Example of multiple parameters
              value: ["emails", "docs"]   # ?ids=1,5,7
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI
    put:
      operationId: partialUpdateUser
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope"><br>
        ---
        Partialy update current authenticated user with that endpoint.

        Avalable request fileds for changing:

          - `first_name`

          - `last_name`

          - `patronymic`

          - `bio`

          - `dob`

          - `gender`

        <strong> Note that the username is not a changable field.
        Also, the in order to change the email a user must use the specific endpoint.
        </strong>
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI

  /api/v1/user/plan/:
    get:
      operationId: retrieveUserPlan
      description:
        Retrieve information about current user's plan
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
          description: ''
        '404':
          description: ''
      tags:
      - UserAPI.Plan
    delete:
      operationId: deleteUserPlan
      description: Reset current user's plan to default
      responses:
        '204':
          description: '204 No Content'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.Plan

  /api/v1/user/plan/corp/:
    get:
      operationId: get_corp_status
      description:
       Get information about current user's request to have a corp plan
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorpPlan'
          description: ''
        '404':
          description: 'If the user has not submitted a request.'
      tags:
      - UserAPI.Plan
    put:
      operationId: setCorpPlan
      description: send a request to have a corp plan
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorpPlan'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorpPlan'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
        - UserAPI.Plan

  /api/v1/user/plan/pro/:
    get:
      operationId: get_pro_status
      description:
       Get information about current user's request to have a corp plan
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProPlan'
          description: ''
        '404':
          description: 'If the user has not submitted a request.'
      tags:
      - UserAPI.Plan
    put:
      operationId: setProPlan
      description: send a request to have a corp plan
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProPlan'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProPlan'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
        - UserAPI.Plan
# USER-RELATED ENTITIES
  /api/v1/user/properties/:
    get:
      operationId: retrieveUserProperties
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope"><br>
        ---
        Retrieve a list of properties for the authenticated user. Note that a property will be listed if it's either been created by the authenticated user or the authenticated user has owner privileges (e.g. listed as property-owner, see `properties:owners` scope.
      responses:
        '200':
          $ref: '#/components/responses/200_OK_Properties_Paginated'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserRelatedEntities
  /api/v1/user/bookings/:
    get:
      operationId: retrieveUserBookings
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope"><br>
        ---
        Retrieve a list of bookings for the authenticated user. Bookings with all statuses will be listed (e.g. `AWAITING` - meaning that the property requires additional approval for booking and the owner hasn't given it yet).
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - $ref: '#/components/schemas/Booking'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserRelatedEntities
# USER DOCS
  /api/v1/user/docs/:
    get:
      operationId: listUserDocs
      description: ''
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserDocs
    post:
      operationId: createUserDocs
      description: ''
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserDocs
  /api/v1/user/docs/{docs:id}:
    get:
      operationId: retrieveUserDocs
      description: ''
      parameters:
      - name: docs:id
        in: path
        required: true
        description: A unique integer value identifying one billing address.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
        - UserAPI.UserDocs
    patch:
      operationId: patchUserDocs
      description: ''
      parameters:
      - name: docs:id
        in: path
        required: true
        description: A unique integer value identifying one billing address.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      -  UserAPI.UserDocs
    delete:
      operationId: deleteUserDocs
      description: ''
      parameters:
      - name: docs:id
        in: path
        required: true
        description: A unique integer value identifying one billing address.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserDocs
# USER BILLING INFO
  /api/v1/user/billing_info/:
    get:
      operationId: listUserAddr
      description: ''
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserBillingInfo
    post:
      operationId: createUserAddr
      description: ''
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserBillingInfo
  /api/v1/user/billing_info/{billing_info:id}:
    get:
      operationId: retrieveUserBillingInfo
      description: ''
      parameters:
      - name: billing_info:id
        in: path
        required: true
        description: A unique integer value identifying one billing address.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserBillingInfo
    patch:
      operationId: patchUserBillingInfo
      description: ''
      parameters:
      - name: billing_info:id
        in: path
        required: true
        description: A unique integer value identifying one billing address.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserBillingInfo
    delete:
      operationId: deleteUserBillingInfo
      description: ''
      parameters:
      - name: billing_info:id
        in: path
        required: true
        description: A unique integer value identifying one billing address.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserBillingInfo
# USER PHONES INFO
  /api/v1/user/phones/:
    get:
      deprecated: false
      operationId: retrieveUserPhones
      description: ''
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserPhones
  /api/v1/user/phones/{phones:id}:
    get:
      operationId: retrieveUserPhone
      description: ''
      parameters:
      - name: phones:id
        in: path
        required: true
        description: A unique integer value identifying one billing address.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserPhones
    post:
      operationId: createUserPhone
      description: ''
      parameters:
      - name: phones:id
        in: path
        required: true
        description: A unique integer value identifying one billing address.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserPhones
    patch:
      operationId: patchUserPhone
      description: ''
      parameters:
      - name: phones:id
        in: path
        required: true
        description: A unique integer value identifying one billing address.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserPhones
    delete:
      operationId: deleteUserPhone
      description: ''
      parameters:
      - name: phones:id
        in: path
        required: true
        description: A unique integer value identifying one billing address.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserPhones
# USER EMAILS INFO
  /api/v1/user/emails/:
    get:
      operationId: listUserEmails
      description: ''
      responses:
        '200':
          content:
            multipart:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserEmails
    post:
      operationId: createUserEmails
      description: ''
      responses:
        '200':
          content:
            multipart:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserEmails
  /api/v1/user/emails/{emails:id}:
    get:
      operationId: retrieveUserEmail
      description: ''
      parameters:
      - name: emails:id
        in: path
        required: true
        description: A unique integer value identifying one billing address.
        schema:
          type: string
      responses:
        '200':
          content:
            multipart:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserEmails
    patch:
      operationId: patchUserEmail
      description: ''
      parameters:
      - name: emails:id
        in: path
        required: true
        description: A unique integer value identifying one billing address.
        schema:
          type: string
      responses:
        '200':
          content:
            multipart:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserEmails
    delete:
      operationId: deleteUserEmail
      description: ''
      parameters:
      - name: emails:id
        in: path
        required: true
        description: A unique integer value identifying one billing address.
        schema:
          type: string
      responses:
        '200':
          content:
            multipart:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserEmails
# USER USERPIC
  /api/v1/user/userpic/:
    put:
      operationId: uploadUserUserPic
      description: ''
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserImageToUpload'
      responses:
        '200':
          description: 'OK.'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserPic
    delete:
      operationId: deleteUserUserPic
      description: ''
      responses:
        '204':
          description: 'Deleted successfully.'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserPic
# USER ACCOUNT-RELATED INFO
  /api/v1/user/change_password/:
    put:
      operationId: changePassword
      description: |
        Takes the new password and it's confirmation as well as the old password and
        changes user's password to the new one.
        <br>

        <h4>The request must be sent with a valid access token.</h4>
        <br><img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Completed"> <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Tested">
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'
      responses:
        '204':
          description: '204 No Content'
        #'400':
          #$ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.Security
  /api/v1/user/reset_password/:
    put:
      operationId: resetPassword
      description: |
        <h4>The request must be sent with a valid access token.</h4>
        <br><img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Completed"> <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Tested">

      responses:
        '200':
          description: ''
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        #'400':
          #$ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.Security
components:
  schemas:
    PropertyList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        title:
          type: string
          maxLength: 50
          example: "The Best Property Out There"
        body:
          type: string
          example: "Description of the Best Property"
        price:
          type: number
          example: 999
        active:
          type: boolean
          example: true
        property_type:
          type: integer
          enum: [100, 200, 300]
          example: 100
        booking_type:
          type: integer
          enum: [100, 200]
          example: 100
        visibility:
          type: integer
          enum: [100, 200, 300]
          example: 100
        main_image:
          type: string
          readOnly: true
          example: "http://testserver/media/5500e68537c740898615ad80466d0942.png"
        property_address:
          $ref: "#/components/schemas/PropertyAddress"
        client_greeting_message:
          type: string
          readOnly: false
          example:
            "Some nice message to greet a client."
        requires_additional_confirmation:
          type: boolean
          example: false
        created_at:
          type: string
          readOnly: true
          example: "2020-12-19T04:53:34+0300"
        updated_at:
          type: string
          readOnly: true
          example: "2020-12-19T04:53:34+0300"
    Property:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        title:
          type: string
          maxLength: 50
          example: "The Best Property Out There"
        body:
          type: string
          example: "Description of the Best Property"
        price:
          type: number
          example: 999
        availability:
          $ref: "#/components/schemas/Availability"
        is_owner:
          type: boolean
          example: true
          readOnly: true
        current_user_permissions:

          $ref: "#/components/schemas/CurrentUserPermissions"

        active:
          type: boolean
          example: true
        property_type:
          type: integer
          enum: [100, 200, 300]
          example: 100
        booking_type:
          type: integer
          enum: [100, 200]
          example: 100
        visibility:
          type: integer
          enum: [100, 200, 300]
          example: 100
        main_image:
          type: string
          readOnly: true
          example: "http://testserver/media/5500e68537c740898615ad80466d0942.png"
        contacts:
          type: array
          items:
            $ref: "#/components/schemas/Contact"
          readOnly: true
        property_address:
          $ref: "#/components/schemas/PropertyAddress"
        property_images:
          type: array
          items:
            $ref: "#/components/schemas/PropertyImageToRepr"
          readOnly: true
        client_greeting_message:
          type: string
          readOnly: false
          example:
            "Some nice message to greet a client."
        requires_additional_confirmation:
          type: boolean
          example: false
        created_at:
          type: string
          readOnly: true
          example: "2020-12-19T04:53:34+0300"
        updated_at:
          type: string
          readOnly: true
          example: "2020-12-19T04:53:34+0300"
      required:
      - title
      - body
      - price
      - property_address
      - availability
    Availability:
      type: object
      properties:
        open_days:
          type: array
          items:
            type: integer

        departure_time_until:
          type: string
          example: "11:00"

        arrival_time_from:
          type: string
          example: "14:00"

        maximum_number_of_clients:
          type: integer
          example: 11
        available_until:
          type: string
          example: "14:00"
        available_from:
          type: integer
          example: "08:00"
    Contact:
      type: object
      properties:
        user_id:
          type: integer
          example: 2
          readOnly: true
        email:
          type: string
          example: "example@test.com"
          readOnly: true
        first_name:
          type: string
          example: "OwnerFirstName"
          readOnly: true
        userpic:
          type: string
          example: ""
          readOnly: true
        is_creator:
          type: boolean
          example: false
        email_confirmed:
          type: boolean
          example: false
        phone_confirmed:
          type: boolean
          example: false
    UserMember:
      readOnly: true
      type: object
      properties:
        id:
          type: integer
          example: 2
          readOnly: true
        email:
          type: string
          example: "example@test.com"
          readOnly: true
        first_name:
          type: string
          example: "OwnerFirstName"
          readOnly: true
        last_name:
          type: string
          example: "OwnerLastName"
          readOnly: true
        middle_name:
          type: string
          example: "OwnerMiddleName"
          readOnly: true
        timezone:
          type: boolean
          example: false

    Member:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/UserMember"
        email:
          type: string
          example: "example@test.com"
        is_creator:
          type: boolean
          example: false
        can_add_properties:
          type: boolean
          example: false
        can_delete_properties:
          type: boolean
          example: false
        can_book_properties:
          type: boolean
          example: false
        recursive_ownership:
          type: boolean
          example: false
        can_add_members:
          type: boolean
          example: false
        can_manage_members:
          type: boolean
          example: false
        can_remove_members:
          type: boolean
          example: false
        created_at:
          type: string
          example: "2021-03-19T02:33:36+0300"
          readOnly: true
        updated_at:
          type: string
          example: "2021-03-19T02:33:36+0300"
          readOnly: true
    Group:
      type: object
      properties:
        id:
          type: integer
          example: 11
          readOnly: true
        title:
          type: string
          example: "Storages"
        description:
          type: string
          example: "Storages"
        is_my_group:
          type: boolean
          example: true
          readOnly: true
        created_at:
          type: string
          example: "2021-03-19T02:33:08+0300"
          readOnly: true
        updated_at:
          type: integer
          example: "2021-03-19T02:33:08+0300"
          readOnly: true
    Owner:
      type: object
      readOnly: true
      properties:
        owner_id:
            type: integer
            readOnly: true
        user_id:
            type: integer
            readOnly: true
        has_super_owner_permissions:
            type: boolean
            readOnly: false
            example: true
        can_edit:
            type: boolean
            readOnly: false
            example: true
        can_delete:
            type: boolean
            readOnly: false
            example: true

        can_add_images:
            type: boolean
            readOnly: false
            example: true
        can_delete_images:
            type: boolean
            readOnly: false
            example: true

        can_add_bookings:
            type: boolean
            readOnly: false
            example: true
        can_manage_bookings:
            type: boolean
            readOnly: false
            example: true

        can_add_owners:
            type: boolean
            readOnly: false
            example: true
        can_manage_owners:
            type: boolean
            readOnly: false
            example: true

        can_delete_owners:
            type: boolean
            readOnly: false
            example: true
        can_add_locks:
            type: boolean
            readOnly: false
            example: true

        can_manage_locks:
            type: boolean
            readOnly: false
            example: true
        can_delete_locks:
            type: boolean
            readOnly: false
            example: true

        can_add_to_group:
            type: boolean
            readOnly: false
            example: true
        can_add_to_organisation:
            type: boolean
            readOnly: false
            example: true

        is_creator:
            type: boolean
            readOnly: true
            example: true
        first_name:
            type: string
            example: "Имя"
            readOnly: true
        last_name:
            type: string
            example: "Фамилия"
            readOnly: true
        middle_name:
            type: string
            example: "Отчество"
            readOnly: true
        email:
            type: string
            example: "customer@lockandrent.ru"
        visibility:
          type: integer
          enum: [100, 200]
          example: 100
        created_at:
          readOnly: true
          type: string
          example: "2020-12-17T00:43:42.148287+03:00"
        updated_at:
          readOnly: true
          type: string
          example: "2020-12-17T00:43:42.149282+03:00"
    PropertyAddress:
      type: object
      properties:
        country:
          type: string
          example: "Russia"
        city:
          type: string
          example: "Moscow"
        street:
          type: string
          example: "Таллинская"
        building:
          type: string
          example: "34"
        floor:
          type: string
          example: "5"
        number:
          type: string
          example: "520"
        zip_code:
          type: string
          example: "123458"
        directions_description:
          type: string
          example: "Some directions from the nearest metro station or smth."
    CurrentUserPermissions:
      type: object
      readOnly: true
      properties:
        has_super_owner_permissions:
            type: boolean
            readOnly: true
            example: true
        can_edit:
            type: boolean
            readOnly: true
            example: true
        can_delete:
            type: boolean
            readOnly: true
            example: true

        can_add_images:
            type: boolean
            readOnly: true
            example: true
        can_delete_images:
            type: boolean
            readOnly: true
            example: true

        can_add_bookings:
            type: boolean
            readOnly: true
            example: true
        can_manage_bookings:
            type: boolean
            readOnly: true
            example: true

        can_add_owners:
            type: boolean
            readOnly: true
            example: true
        can_manage_owners:
            type: boolean
            readOnly: true
            example: true

        can_delete_owners:
            type: boolean
            readOnly: true
            example: true
        can_add_locks:
            type: boolean
            readOnly: true
            example: true

        can_manage_locks:
            type: boolean
            readOnly: true
            example: true
        can_delete_locks:
            type: boolean
            readOnly: true
            example: true

        can_add_to_group:
            type: boolean
            readOnly: true
            example: true
        can_add_to_organisation:
            type: boolean
            readOnly: true
            example: true

        is_creator:
            type: boolean
            readOnly: true
            example: true

    ImageToUpload:
      type: object
      properties:
        images:
          type: array
          items:
            type: string
            format: binary
    PropertyImageToRepr:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        image:
          type: string
          readOnly: true
          example: "http://testserver/media/5500e68537c740898615ad80466d0942.png"
        is_main:
          type: boolean
          readOnly: true
          example: true
        uploaded_at:
          type: string
          readOnly: true
          example: "2020-12-12T20:36:11+03:00"
    Booking:
      type: object
      properties:
        id:
          type: number
          example: 1
          readOnly: true
        booked_property:
          type: array
          readOnly: true
          items:
            $ref: "#/components/schemas/PropertyList"
        number_of_clients:
          type: integer
          example: 1
        client_email:
          type: string
          example: "example@test.com"
        status:
          readOnly: true
          type: string
          enum: ["ACCEPTED", "AWAITING", "DECLINED", "EXPIRED"]
        booked_from:
          type: string
          example: "2020-12-17T03:00+0300"
        booked_until:
          type: string
          example: "2020-12-17T04:00+0300"
        booked_by:
          type: integer
          example: 57
          readOnly: true
        price:
          type: integer
          example: 5000
          readOnly: true
        timezone:
          type: string
          example: "Europe/Moscow"
          readOnly: true
        created_at:
          readOnly: true
          type: string
          example: "2020-12-12T20:36:11+03:00"
        updated_at:
          readOnly: true
          type: string
          example: "2020-12-12T20:36:11+03:00"
      required:
      - number_of_clients
      - client_email
      - booked_from
      - booked_until
    LockCreate:
      type: object
      properties:
        code:
          type: string
          example: "A21V1212"
    LockAccess:
      readOnly: true
      type: object
      properties:
        try_time:
          type: string
          example: "2020-12-12T20:36:11+03:00"
          readOnly: true
        result:
          type: boolean
          example: true
          readOnly: true
    Lock:
      type: object
      properties:
        lock_id:
          type: string
          example: "1"
          readOnly: true
        description:
          type: string
          example: "Smart Lock on door 1"
        lastAccess:
          $ref: "#/components/schemas/LockAccess"
    SingleSlot:
      type: object
      properties:
        start:
          type: string
          example: "2021-02-09T21:00"
        end:
          type: string
          example: "2021-02-09T22:00"
    SlotsList:
      type: object
      properties:
        count:
          type: integer
          example: "1"
        property_timezone:
          type: string
          example: "Europe/Moscow"
        available_slots:
          type: array
          items:
            $ref: "#/components/schemas/SingleSlot"
    DailyAvailablePost:
      type: object
      properties:
        booked_from:
          type: string
          example: "2021-02-01"
        booked_until:
          type: string
          example: "2021-02-12"
        number_of_clients:
          type: integer
          example: 2
    User:
      type: object
      properties:
        id:
          type: number
          example: 1
        email:
          type: string
          example: "janedoe@test.com"
        userpic:
          type: string
          example: ""
        first_name:
          type: string
          example: "Имя"
        last_name:
          type: string
          example: "Фамилия"
        middle_name:
          type: string
          example: "Отчество"
        bio:
          type: string
          example: "О себе"
        email_confirmed:
          type: boolean
          example: False
        phone_confirmed:
          type: boolean
          example: False
        two_factor_auth:
          type: boolean
          example: False
        is_banned:
          type: boolean
          example: False
        tos_version:
          type: "string"
          example: "1.0"
        timezone:
          type: "string"
          example: "Europe/Moscow"
        dob:
          type: "string"
          example: "1970-01-01"
        gender:
          type: string
          example: "F"
        is_admin:
          type: boolean
          example: False
        properties_url:
          type: string
          example: "http://testserver/api/v1/user/properties/"
        organisations_url:
          type: string
          example: "http://testserver/api/v1/user/orgs/"
        bookings_url:
          type: string
          example: "http://testserver/api/v1/user/bookings/"
        documents_url:
          type: string
          example: "http://testserver/api/v1/user/docs/"
        billing_addresses_url:
          type: string
          example: "http://testserver/api/v1/user/billing_addresses/"
        phones_url:
          type: string
          example: "http://testserver/api/v1/user/phones/"
        emails_url:
          type: string
          example: "http://testserver/api/v1/user/emails/"
        date_created:
          type: string
          example: "2020-11-25T23:36:11.562947+03:00"
        last_updated:
          type: string
          example: "2020-11-25T23:36:11.562947+03:00"
    Key:
      type: object
      properties:
        id:
          type: integer
          example: 1
          readOnly: true
        lock:
          type: integer
          example: 1
          readOnly: true
        key:
          type: string
          example: "123411"
        access_start:
          type: string
          example: "2020-12-17T03:00+0300"
        access_stop:
          type: string
          example: "2020-12-18T03:00+0300"
    Card:
      type: object
      properties:
        id:
          type: integer
          example: 1
          readOnly: true
        lock:
          type: integer
          example: 1
          readOnly: true
        card_id:
          type: string
          example: "A23A12"
        is_master:
          type: boolean
          example: true
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          writeOnly: true
      required:
      - username
      - password
    TokenRefresh:
      type: object
      properties:
        refresh:
          type: string
      required:
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
      required:
      - token
    ProPlan:
      type: object
      properties:
        requested_plan:
          type: string
          example: "PRO"
          readOnly: true
        client:
          type: integer
          example: 1
          readOnly: true
        status:
          type: string
          example: "APPROVED"
          readOnly: true
        status_changed_reason:
          type: string
          example: "OK"
          readOnly: true
        created_at:
          type: string
          example: "2021-03-17T18:52:20+0300"
          readOnly: true
        updated_at:
          type: string
          example: "2021-03-17T18:52:20+0300"
          readOnly: true
    CorpPlan:
      type: object
      properties:
        requested_plan:
          type: string
          example: "CORP"
          readOnly: true
        client:
          type: integer
          example: 1
          readOnly: true
        status:
          type: string
          example: "APPROVED"
          readOnly: true
        status_changed_reason:
          type: string
          example: "OK"
          readOnly: true
        created_at:
          type: string
          example: "2021-03-17T18:52:20+0300"
          readOnly: true
        updated_at:
          type: string
          example: "2021-03-17T18:52:20+0300"
          readOnly: true
    UserImageToUpload:
      type: object
      properties:
        images:
          type: string
          format: binary
    PropertyAddToGroup:
      type: object
      properties:
        properties:
          type: array
          items:
            type: integer
            example: 1

    PropertyGroupMembership:
      type: object
      properties:
        prop_member_id:
          type: integer
          example: 1
        property:
          $ref: "#/components/schemas/PropertyList"
        created_at:
          type: string
          example: "2021-03-17T18:52:20+0300"
          readOnly: true
        updated_at:
          type: string
          example: "2021-03-17T18:52:20+0300"
          readOnly: true

    Plan:
      type: object
      properties:
        plan:
          type: string
          example: "CORP"
          readOnly: true
        created_at:
          type: string
          example: "2021-03-17T18:52:20+0300"
          readOnly: true
        updated_at:
          type: string
          example: "2021-03-17T18:52:20+0300"
          readOnly: true
    401BadToken:
      description: "Invalid Token. Given token is not valid"
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
          example: [
                  "Invalid Token : Given token is not valid"
                  ]
        status_code:
          type: integer
          example: 401
    401Unauthorized:
      description: "Unauthorized : Authentication not provided."
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
          example: [
                  "Unauthorized : Authentication not provided."
                  ]
        status_code:
          type: integer
          example: 401
    PaginatedResponse:
      type: object
      properties:
        count:
          type: integer
          example: 7
        next:
          type: string
          example: "http://testserver/api/v1/<namespace:list>/?page=4"
        previous:
          type: string
          example: "http://testserver/api/v1/<namespace:list>/?page=2"
    Register:
      type: object
      properties:
        first_name:
          type: string
          writeOnly: true
        last_name:
          type: string
          writeOnly: true
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
      required:
      - first_name
      - last_name
      - password
      - password2
    ChangePassword:
      type: object
      properties:
        old_password:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
  parameters:
    # parameters for regestration and logging
    emailParam:
      name: email
      in: query
      description: Email of the user.
      required: true
      schema:
        type: string
        example: "test@test.com"
    firstNameParam:
      name: first_name
      in: query
      description: First name of the user.
      required: true
      schema:
        type: string
        example: "Jane"
    lastNameParam:
      name: last_name
      in: query
      description: Last of the user.
      required: true
      schema:
        type: string
        example: "Doe"
    passwordParam:
      name: password
      in: query
      description: Password for the user.
      required: true
      schema:
        type: string
        example: "qwerty1234"
    password2Param:
      name: password2
      in: query
      description: Password confirmation for the user.
      required: true
      schema:
        type: string
        example: "querty1234"
  responses:
    200_OK_Patch_User:
      description: Responce was processed
      content:
        application/json:
          schema:
            properties:
              access:
                type: string
                example:
              refresh:
                type: string
                example:
              personal_info:
                properties:
                  id:
                    type: number
                    example: 1
                  username:
                    type: string
                    example: "janedoe"
                  email:
                    type: string
                    example: "janedoe@test.com"
                  userpic:
                    type: string
                    example: ""
                  first_name:
                    type: string
                    example: "Newfirstname"
                  last_name:
                    type: string
                    example: "New-LastName"
                  patronymic:
                    type: string
                    example: "Отчество"
                  bio:
                    type: string
                    example: "О себе"
                  is_confirmed:
                    type: boolean
                    example: False
                  dob:
                    type: "string"
                    example: "1970-01-01"
                  gender:
                    type: string
                    example: "F"
                  is_admin:
                    type: boolean
                    example: False
                  properties_url:
                    type: string
                    example: "http://testserver/api/v1/user/properties/"
                  organisations_url:
                    type: string
                    example: "http://testserver/api/v1/user/orgs/"
                  bookings_url:
                    type: string
                    example: "http://testserver/api/v1/user/bookings/"
                  documents_url:
                    type: string
                    example: "http://testserver/api/v1/user/docs/"
                  billing_addresses_url:
                    type: string
                    example: "http://testserver/api/v1/user/billing_addresses/"
                  phones_url:
                    type: string
                    example: "http://testserver/api/v1/user/phones/"
                  emails_url:
                    type: string
                    example: "http://testserver/api/v1/user/emails/"
                  date_created:
                    type: string
                    example: "2020-11-25T23:36:11.562947+03:00"
                  last_updated:
                    type: string
                    example: "2020-11-25T23:36:11.562947+03:00"
    200_OK_Keys_Paginated:
      description: Responce was processed
      content:
        application/json:
          schema:
            properties:
              count:
                type: integer
                example: 7
              next:
                type: string
                example: "http://testserver/api/v1/properties/1/locks/1/keys/?page=4"
              previous:
                type: string
                example: "http://testserver/api/v1/properties/1/locks/1/keys/?page=2"
              results:
                  type: array
                  items:
                    $ref: "#/components/schemas/Key"
    200_OK_Cards_Paginated:
      description: Responce was processed
      content:
        application/json:
          schema:
            properties:
              count:
                type: integer
                example: 7
              next:
                type: string
                example: "http://testserver/api/v1/properties/1/locks/1/cards/?page=4"
              previous:
                type: string
                example: "http://testserver/api/v1/properties/1/locks/1/cards/?page=2"
              results:
                  type: array
                  items:
                    $ref: "#/components/schemas/Card"
    200_OK_Locks_Paginated:
      description: Responce was processed
      content:
        application/json:
          schema:
            properties:
              count:
                type: integer
                example: 7
              next:
                type: string
                example: "http://testserver/api/v1/properties/1/locks/?page=4"
              previous:
                type: string
                example: "http://testserver/api/v1/properties/1/locks/?page=2"
              results:
                  type: array
                  items:
                    $ref: "#/components/schemas/Lock"
    200_OK_Locks_Access_Paginated:
      description: Responce was processed
      content:
        application/json:
          schema:
            properties:
              count:
                type: integer
                example: 7
              next:
                type: string
                example: "http://testserver/api/v1/properties/1/locks/accesses/?page=4"
              previous:
                type: string
                example: "http://testserver/api/v1/properties/1/locks/accesses/?page=2"
              results:
                  type: array
                  items:
                    $ref: "#/components/schemas/LockAccess"
    200_OK_Owners_Paginated:
      description: Responce was processed
      content:
        application/json:
          schema:
            properties:
              count:
                type: integer
                example: 7
              next:
                type: string
                example: "http://testserver/api/v1/properties/1/owners/?page=4"
              previous:
                type: string
                example: "http://testserver/api/v1/properties/1/owners/?page=2"
              results:
                  type: array
                  items:
                    $ref: "#/components/schemas/Owner"
    200_OK_Properties_Paginated:
      description: Responce was processed
      content:
        application/json:
          schema:
            properties:
              count:
                type: integer
                example: 7
              next:
                type: string
                example: "http://testserver/api/v1/properties/?page=4"
              previous:
                type: string
                example: "http://testserver/api/v1/properties/?page=2"
              results:
                  type: array
                  items:
                    $ref: "#/components/schemas/PropertyList"
    200_OK_Members_Paginated:
      description: Responce was processed
      content:
        application/json:
          schema:
            properties:
              count:
                type: integer
                example: 7
              next:
                type: string
                example: "http://testserver/api/v1/property-groups/members/?page=4"
              previous:
                type: string
                example: "http://testserver/api/v1/property-groups/members/?page=2"
              results:
                  type: array
                  items:
                    $ref: "#/components/schemas/Member"
    200_OK_Property_Member_Paginated:
      description: Responce was processed
      content:
        application/json:
          schema:
            properties:
              count:
                type: integer
                example: 7
              next:
                type: string
                example: "http://testserver/api/v1/property-groups/properties/?page=4"
              previous:
                type: string
                example: "http://testserver/api/v1/property-groups/properties/?page=2"
              results:
                  type: array
                  items:
                    $ref: "#/components/schemas/PropertyGroupMembership"
    200_OK_Bookings_Paginated:
      description: Responce was processed
      content:
        application/json:
          schema:
            properties:
              count:
                type: integer
                example: 7
              next:
                type: string
                example: "http://testserver/api/v1/properties/bookings/?page=4"
              previous:
                type: string
                example: "http://testserver/api/v1/properties/bookings/?page=2"
              results:
                  type: array
                  items:
                    $ref: "#/components/schemas/Booking"
    200_OK_Groups_Paginated:
      description: Responce was processed
      content:
        application/json:
          schema:
            properties:
              count:
                type: integer
                example: 7
              next:
                type: string
                example: "http://testserver/api/v1/property-groups/?page=4"
              previous:
                type: string
                example: "http://testserver/api/v1/property-groups/?page=2"
              results:
                  type: array
                  items:
                    $ref: "#/components/schemas/Group"
    200_OK:
      description: Responce was processed
      content:
        application/json:
          schema:
            properties:
              access:
                type: string
                example:
              refresh:
                type: string
                example:
              personal_info:
                $ref: "#/components/schemas/User"
    404_Not_Found:
      description: "404 not found: resource doesn't exist."
      content:
        application/json:
          schema:
            properties:
              errors:
                type: array
                example: [
                  "Not Found : Resource does not exist"
                  ]
              status_code:
                type: integer
                example: 404
    403_Forbidden:
      description: "403 Forbidden : You do not have necessary permissions"
      content:
        application/json:
          schema:
            properties:
              errors:
                type: array
                example: [
                  "Forbidden : You do not have necessary permissions"
                  ]
              status_code:
                type: integer
                example: 403
    422_Invalid_Data_Property:
      description: "Invalid Data : Invalid data has been submitted"
      content:
        application/json:
          schema:
            properties:
              errors:
                type: array
                example: [
                  "price : price parameter cannot be negative"
                  ]
              status_code:
                type: integer
                example: 422
    400_Bad_Request_Property:
      description: "400 Bad request"
      content:
        application/json:
          schema:
            properties:
              errors:
                type: array
                example: [
                  "Bad Request : Request was malformed or data was unacceptable. Try again with changed request."
                  ]
              status_code:
                type: integer
                example: 400
    204_Deleted:
      description: "204 No Content"
      content:
        application/json:
          schema:
            properties:
              status_code:
                type: integer
                example: 204
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
tags:
  - name: UserAPI
    description: "General Endpoints for the authenticated user."
    externalDocs:
      url: google.com
  - name: UserAPI.UserRelatedEntities
    description: "Endpoints for the related entites of the authenticated user such as bookings or organisations."
  #- name: UserAPI.UserBillingInfo
  #  description: "Endpoints for billing info of the authenticated user."
  #- name: UserAPI.UserEmails
  #  description: "Endpoints for emails of the authenticated user."
  #- name: UserAPI.UserDocs
  #  description: "Endpoints for documents of the authenticated user."
  #- name: UserAPI.UserPhones
  #  description: "Endpoints for phones of the authenticated user."
  - name: UserAPI.UserPic
    description: "Endpoints for userpic of the authenticated user."
  - name: UserAPI.Security
    description: "Endpoints for account-related actions of the authenticated user, such as changing password."
  - name: UserAPI.Plan
    description: "Endpoints for plan-related actions of the authenticated user, such as requesting a pro plan."
  - name: PropertiesAPI
    description: "General Endpoints for dealing with properties."
  - name: CalendarAPI
    description: "API for the LockAndRent Calendar App"

  - name: Properties.BookingsAPI
    description: "Endpoint for managing bookings. Available only for property owners."
  - name: PropertiesAPI.OwnersAPI
    description: "Endpoint for managing owners."
  - name: PropertiesAPI.Images
    description: "Endpoint for managing images for a property."
  - name: PropertiesAPI.Locks
    description: "Endpoint for managing locks for a property. "
  - name: PropertiesAPI.Availability
    description: "Endpoint for accessing a property availability."
  - name: PropertiesAPI.Locks.Accesses
    description: "Endpoint for managing lock accesses for a property. "
  - name: PropertiesAPI.Locks.Cards
    description: "Endpoint for managing lock cards for a property."
  - name: PropertiesAPI.Locks.Keys
    description: "Endpoint for managing lock keys for a property. "
  - name: GroupsAPI
    description: "Endpoint for managing property groups."
  - name: GroupsAPI.Members
    description: "Endpoint for managing members of property groups."
  - name: GroupsAPI.Properties
    description: "Endpoint for managing properties of property groups."
  - name: OrganisationsAPI
    description: "Endpoint for managing organisations."
  - name: OrganisationsAPI.Members
    description: "Endpoint for managing members of organisations."
  - name: OrganisationsAPI.Properties
    description: "Endpoint for managing properties of organisations."
  - name: UsersAPI
    description: "Admin-only scope of endpoints."
  - name: AuthAPI
    description: "Endpoints for authentication-related requests."