openapi: 3.0.2
info:
  title: '294 Internal API Documentation'
  version: '1'
  description: |
    
    ## Useful Links
      - [Current Database Schema](https://yuiborodin.xyz/static/specs/294_UserAndPropertiesFunctions.html)
      - [Current Backend API Functionality Schema](https://yuiborodin.xyz/static/specs/294_UserAndPropertiesFunctions.html)
      - [Current Workflow Schema](https://yuiborodin.xyz/static/specs/294_UserAndPropertiesFunctions.html)

    ---
    ## Conventions
    In this documentation file accepted conventions are as listed below. <br>
    Completed methods are marked as <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
    <br>Tested methods marked as <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">

    ---
    <h4 align="center"> Author: Yury Borodin

    <br> Gitlab: [yuiborodin](https://git.miem.hse.ru/yuiborodin)
    <br> VK: [borodin.yury](https://vk.com/borodin.yury)
    <br> Email: <a href="mailto:yuiborodin@miem.hse.ru">yuiborodin@miem.hse.ru
    </h4>
    ---
  
  contact:
    name: Urgent LockAndRent API Support
    email: api_support@lockandrent.ru

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: https://lockandrent.ru/
    description: main url for PRODUCTION USE
  - url: https://yuiborodin.xyz/
    description: main url for testing API
security:
  - bearerAuth: []
paths:
# AUTH PATHS
  /api/v1/auth/register/:
    post:
      operationId: register
      description: |
        This method is used for account registration
        <br>
        <br><img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Completed"> <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Tested">
      requestBody:
        content:
          application/json:
            schema:
              properties:
                first_name:
                  type: string
                  writeOnly: true
                last_name:
                  type: string
                  writeOnly: true
                email:
                  type: string
                  writeOnly: true
                password:
                  type: string
                  writeOnly: true
                password2:
                  type: string
                  writeOnly: true
              required:
                - first_name
                - last_name
                - password
                - password2
      responses:
        '201':
          $ref: '#/components/responses/200_OK'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
        - AuthAPI
  /api/v1/auth/token/:
    post:
      operationId: createTokenPair
      description: |
        Takes a set of user credentials and returns an access and refresh
        JSON web token pair to prove the authentication of those credentials.
        <br>
        <br><img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Completed"> <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Tested">
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
      responses:
        '200':
          $ref: '#/components/responses/200_OK'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
        - AuthAPI
  /api/v1/auth/token/refresh/:
    post:
      operationId: tokenRefresh
      description: 'Takes a refresh type JSON web token and returns an access type
          JSON web

          token if the refresh token is valid.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
        - AuthAPI
  /api/v1/auth/token/verify/:
    post:
      operationId: tokenVerify
      description: 'Takes a token and indicates if it is valid.  This view provides
          no

          information about a token''s fitness for a particular use.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
        - AuthAPI
  /api/v1/auth/logout/:
    
    post:
      operationId: logoutFromCurrentSession
      description: |
        Takes a given refresh token and blacklists it.
        - Requires access token (isAuthenticated permission) passed with the request.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
      responses:
        '205':
          description: '205 Reset Content'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
        - AuthAPI
  /api/v1/auth/logoutall/:
    post:
      operationId: logoutFromAllSessions
      description: |
        Blacklists all tokens associated with the user that sent the request.
        - Requires access token (isAuthenticated permission) passed with the request.
      parameters: []
      responses:
        '205':
          description: '205 Reset Content'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
        - AuthAPI
# PROPERTY GROUPS
  /api/v1/property-groups/{group:id}/:
    get:
      operationId: retrieveGroup
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        <br>
        This method is used for retrieving information about a
        particular group
      parameters:
      - name: group:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - GroupsAPI
    put:
      operationId: updateGroup
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        <br>This method is used for updating information about a particular group.

      parameters:
      - name: group:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
        - GroupsAPI
    delete:
      operationId: deleteGroup
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        <br>This method is used for delete action for a particular group.
      parameters:
      - name: group:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      responses:
        '204':
          $ref: '#/components/responses/204_Deleted'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - GroupsAPI
  /api/v1/property-groups/:
    get:
      operationId: listGroups
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        <br>This method is used for retrieving a list of groups.

      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/200_OK_Groups_Paginated'
      tags:
      - GroupsAPI
    post:
      operationId: createGroup
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        <br>This method is used for creating a group.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: ''
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - GroupsAPI
# PROPERTY GROUPS MEMBERS
  /api/v1/property-groups/{group:id}/members/{member:id}/:
    get:
      operationId: retrieveGroupMember
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        <br>
        This method is used for retrieving information about members of a particular group
      parameters:
      - name: group:id
        in: path
        required: true
        description: A unique integer value identifying the group.
        schema:
          type: string
      - name: member:id
        in: path
        required: true
        description: A unique integer value identifying the member.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - GroupsAPI.Members
    put:
      operationId: updateGroupMember
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        <br>This method is used for updating information about a particular group member.

      parameters:
      - name: group:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      - name: member:id
        in: path
        required: true
        description: A unique integer value identifying the member.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
        - GroupsAPI.Members
    delete:
      operationId: deleteGroupMember
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        <br>This method is used for delete action for a particular group member.
      parameters:
      - name: group:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      - name: member:id
        in: path
        required: true
        description: A unique integer value identifying the member.
        schema:
          type: string
      responses:
        '204':
          $ref: '#/components/responses/204_Deleted'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - GroupsAPI.Members
  /api/v1/property-groups/{group:id}/members/:
    get:
      operationId: listGroupsMembers
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        <br>This method is used for retrieving a list of group members.

      parameters:
      - name: group:id
        in: path
        required: true
        description: A unique integer value identifying the group.
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200_OK_Members_Paginated'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
      tags:
      - GroupsAPI.Members
    post:
      operationId: createGroupMember
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        <br>This method is used for creating a group member.
      parameters:
      - name: group:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
          description: 'Success.'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - GroupsAPI.Members
  /api/v1/property-groups/{group:id}/members/delete/:
    post:
      operationId: deleteGroupsMembers
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        <br>Use this method to delete members of a group.
        A `can_remove_members` permission of a group member is neccessary. 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteMembersBulk'
      parameters:
      - name: group:id
        in: path
        required: true
        description: A unique integer value identifying the group.
        schema:
          type: string
      responses:
        '204':
          description: "OK."
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - GroupsAPI.Members
  
    

# PROPERTY GROUPS PROPERTIES
  /api/v1/property-groups/{group:id}/properties/:

    get:
      operationId: listGroupProperties
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        <br>This method is used for retrieving a list of group's properties.

      parameters:
      - name: group:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200_OK_Property_Member_Paginated'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
      tags:
      - GroupsAPI.Properties
    post:
      operationId: addPropertiesToGroup
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        <br>This method is used for creating a group property member (adding a property to a group).
      parameters:
      - name: group:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyAddToGroup'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyGroupMembership'
          description: ''
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - GroupsAPI.Properties

  /api/v1/property-groups/{group:id}/properties/delete/:
    post:
      operationId: deletePropertiesFromGroup
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        <br>Use this method to delete proprerties from a group.
        A `can_delete_properties` permission of a group member is neccessary. 

      parameters:
      - name: group:id
        in: path
        required: true
        description: A unique integer value identifying the group.
        schema:
          type: string
      responses:
        '204':
          description: "OK."
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - GroupsAPI.Properties

# PROPERTIES
  /api/v1/properties/{properties:id}/:
    get:
      operationId: retrieveProperty
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        <br>
        This method is used for retrieving information about a
        particular property
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI
    patch:
      operationId: partiallyUpdateProperty
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        Method to partially update property.
      deprecated: true
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
        - PropertiesAPI
    put:
      operationId: updateProperty
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        <br>This method is used for updating information of a particular property.
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI
    delete:
      operationId: deleteProperty
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
       
        ---
        <br>This method is used for delete action for a particular property.
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      responses:
        '204':
          $ref: '#/components/responses/204_Deleted'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI
  /api/v1/properties/:
    get:
      operationId: listProperties
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        <br>This method is used for retrieving a list of properties.
        <br> All properties with visibility level of 100 will be shown here.
        
      parameters: 
      - name: search
        in: query
        required: false
        description: search string.
        schema:
          type: string
          example: "Very good property"
      - name: number_of_clients
        in: query
        required: false
        description: number of clients filter
        schema:
          type: integer
          example: 1
      - name: type
        in: query
        required: false
        description: property type code filter
        schema:
          type: integer
          example: 100
      - name: city
        in: query
        required: false
        description: city filter
        schema:
          type: string
          example: "Moscow"
      - name: street
        in: query
        required: false
        description: street filter
        schema:
          type: string
          example: "Street"
      - name: booking_type
        in: query
        required: false
        description: booking type code filter
        schema:
          type: integer
          example: 100
          enum:
            - 100
            - 200
      - name: min_price
        in: query
        required: false
        description: price is greater than or equal to filter
        schema:
          type: integer
          example: 100
      - name: max_price
        in: query
        required: false
        description: price is less than or equal to filter
        schema:
          type: integer
          example: 1000
      - name: ordering
        in: query
        required: false
        description: ordering filter
        schema:
          type: string
          example: "price"
          enum:
            - price
            - -price
            - created_at
            - -created_at
      responses:
        '200':
          $ref: '#/components/responses/200_OK_Properties_Paginated'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
      tags:
      - PropertiesAPI
    post:
      operationId: createProperty
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        <br>This method is used for creating a property.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
          description: ''
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI
# PROPERTIES FAVORITE
  /api/v1/properties/{properties:id}/favorite/:
    put:
      operationId: setFavortiteProperty
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        <br>This method is used for adding a property to favorites.

      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string

      responses:
        '200':

          description: 'Added.'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
      tags:
      - PropertiesAPI.Favorites
    delete:
      operationId: deleteFavoriteProperty
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        <br>This method is used for removing a property from favorites.
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      responses:
        '204':
          $ref: '#/components/responses/204_Deleted'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Favorites

# PROPERTIES BOOKINGS PATHSBookingsAPI

  /api/v1/properties/{properties:id}/bookings/:
    get:
      operationId: listPropertyBookings
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        This method is used for retrieving a list of bookings for the property with `properties:id`.
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200_OK_Bookings_Paginated'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - BookingsAPI
    post:
      operationId: createPropertyBooking
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        
        <br>Use this endpoint in order to create a booking for a particular property.
        <br> *This endpoint could be used by any authenticated user. If the owner of the property
        doest the booking, the status is automatically set to `ACCEPTED`*.
        <br> *The `AWAITING` and `DECLINED` statuses are awailable only if the
        property has `requires_additional_confirmation` parameter set to `true`.*

        __Note that if the booking is being created for the property with
        daily type of bookings then there's no need to provide the time and
        the timezone. Timezone offset is optional.__


        __Cliend email is needed only if the owner creates the booking, otherwise the email of the current auth user is used.__

        Extended docs: [Gitlab](https://git.miem.hse.ru/294/web-294/-/wikis/API/%D0%A0%D0%B5%D1%81%D1%83%D1%80%D1%81%D1%8B/%D0%91%D1%80%D0%BE%D0%BD%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-%D0%B1%D1%80%D0%BE%D0%BD%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
          description: ''
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
        '403':
          $ref: '#/components/responses/403_Forbidden'
      tags:
      - BookingsAPI
  /api/v1/properties/{properties:id}/bookings/{bookings:id}/:
    get:
      operationId: retrievePropertyBooking
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---

        This method is used for retrieving information about a
        particular booking.
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      - name: bookings:id
        in: path
        required: true
        description: A unique integer value identifying the booking.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - BookingsAPI
    put:
      operationId: updatePropertyBooking
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        
        This method is used for updating a booking.
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      - name: bookings:id
        in: path
        required: true
        description: A unique integer value identifying the booking.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingUpdate'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - BookingsAPI
    delete:
      operationId: archivePropertyBooking
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        
        Use this method to archive a particular booking - it will not show in lists of bookings.
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      - name: bookings:id
        in: path
        required: true
        description: A unique integer value identifying the booking.
        schema:
          type: string
      responses:
        '204':
          $ref: '#/components/responses/204_Deleted'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'

      tags:
      - BookingsAPI
  /api/v1/properties/{properties:id}/bookings/{bookings:id}/cancel/:
    post:
      operationId: cancelPropertyBooking
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        
        Use this method to cancel a particular booking.
      
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      - name: bookings:id
        in: path
        required: true
        description: A unique integer value identifying the booking.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelBooking'
      responses:
        '200':
          description: 'Booking is now cancelled.'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - BookingsAPI
# PROPERTIES OWNERS PATHS
  /api/v1/properties/{properties:id}/owners/:
    get:
      operationId: listPropertyOwners
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        
        This method is used for retrieving information about owners of a
        particular property
        <br> Requires one of the permissions: 
        
        - `can_manage_owners`
        - `is_creator`
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      responses:
        '200':
            $ref: '#/components/responses/200_OK_Owners_Paginated'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.OwnersAPI
    post:
      operationId: addPropertyOwner
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        This method is used to add an owner to the property.
        <br> Requires one of the permissions: 
        
        - `can_add_owners`
        - `is_creator`
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Owner'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Owner'
          description: ''
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.OwnersAPI
  /api/v1/properties/{properties:id}/owners/{owners:id}:
    get:
      operationId: retrievePropertyOwner
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        This method is used for retrieving information about a single owner of a particular property
        <br> Requires one of the permissions: 
        
        - `can_manage_owners`
        - `is_creator`
      
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      - name: owners:id
        in: path
        required: true
        description: A unique integer value identifying the owner.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Owner'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.OwnersAPI
    put:
      operationId: updatePropertyOwner
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        This endpoint updates owner's permissions and other information.

        Note: this endpoint is available only if the authenticated user
        has one of these permissions:
          - `can_manage_owners`

          - `has_super_owner_permissions`
          - `is_creator`
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      - name: owners:id
        in: path
        required: true
        description: A unique integer value identifying the owner.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Owner'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Owner'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.OwnersAPI
    delete:
      operationId: removePropertyOwner
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        This method is used to delete an owner.

        <br> Requires one of the permissions or sets of permissions: 
        
        - `can_delete_owners` & `can_manage_owners` 
        - `is_creator`

      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      - name: owners:id
        in: path
        required: true
        description: A unique integer value identifying the owner.
        schema:
          type: string
      responses:
        '204':
          $ref: '#/components/responses/204_Deleted'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.OwnersAPI
# PROPERTIES IMAGES PATHS
  /api/v1/properties/{properties:id}/images/:
    put:
      operationId: uploadPropertyImages
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">

        ---
        This endpoint is used to upload one or many images of the property.
        <br> Requires one of the permissions: 
        
        - `can_add_images`
        - `is_creator`
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImageToUpload'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyImageToRepr'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Images
    delete:
      operationId: deletePropertyImages
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">

        ---
        This endpoint is used to delete one or many images of the property.
        <br> Requires one of the permissions: 
        
        - `can_delete_images`
        - `is_creator`
      parameters:
      - name: images
        in: query
        required: true
        description: Images for deletion.
        schema:
          type: array
          items:
            type: integer
        style: form
        explode: false
        examples:
          oneId:
            summary: Example of a Image delete
            value: [5]   # ?ids=5
          multipleIds:
            summary: Example of multiple Image delete
            value: [1, 5, 7]   # ?ids=1,5,7
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string

      responses:
        '204':

          description: ''
        '403':
          $ref: '#/components/responses/403_Forbidden'
      tags:
      - PropertiesAPI.Images
  /api/v1/properties/{properties:id}/images/set_main_image/:
    put:
      operationId: setMainPropertyImage
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">

        ---
        This method is used to change main image of the property.
        <br> Requires one of the permissions: 
        
        - `can_add_images`
        - `can_edit`
        - `is_creator`
      
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Images
# PROPERTIES LOCKS PATHS
  /api/v1/properties/{properties:id}/locks/:
    get:
      operationId: listPropertyLocks
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        <br>
        This method is used for retrieving information about a list of locks of a
        particular property
        <br> Requires one of the permissions: 
        
        - `can_manage_locks`
        - `is_creator`
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      responses:
        '200':
            $ref: '#/components/responses/200_OK_Locks_Paginated'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Locks
    post:
      operationId: addPropertyLock
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        <br>
        This method is used for adding a locks to a
        particular property
        <br> Requires one of the permissions: 
        
        - `can_add_locks`
        - `is_creator`
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LockCreate'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lock'
          description: ''
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Locks
  /api/v1/properties/{properties:id}/locks/{lock:id}:
    get:
      operationId: retrievePropertyLock
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        <br>
        This method is used for retrieving information about a particular lock of the property.
        <br> Requires one of the permissions: 
        
        - `can_manage_locks`
        - `is_creator`
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      - name: lock:id
        in: path
        required: true
        description: A unique integer value identifying the lock.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lock'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Locks
    put:
      operationId: updatePropertyLock
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        <br>
        This endpoint updates lock's description
        <br> Requires one of the permissions: 
        
        - `can_manage_locks`
        - `is_creator`
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      - name: lock:id
        in: path
        required: true
        description: A unique integer value identifying the lock.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Lock'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lock'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Locks
    delete:
      operationId: deletePropertyLock
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        <br>
        This endpoint deletes the lock from the property.
        <br> Requires one of the permissions: 
        
        - `can_delete_locks`
        - `is_creator`
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      - name: lock:id
        in: path
        required: true
        description: A unique integer value identifying the lock.
        schema:
          type: string
      responses:
        '204':
          $ref: '#/components/responses/204_Deleted'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Locks
# PROPERTIES LOCKS CARDS PATHS
  /api/v1/properties/{properties:id}/locks/{lock:id}/cards/:
    get:
      operationId: listPropertyCards
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        <br>
        This method is used for retrieving information about cards of a lock of a
        particular property
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      - name: lock:id
        in: path
        required: true
        description: A unique integer value identifying the lock.
        schema:
          type: string
      responses:
        '200':
            $ref: '#/components/responses/200_OK_Cards_Paginated'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Locks.Cards
    post:
      operationId: addPropertyLockCard
      description: ''
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      - name: lock:id
        in: path
        required: true
        description: A unique integer value identifying the lock.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Card'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Locks.Cards
  /api/v1/properties/{properties:id}/locks/{lock:id}/cards/{card:id}/:
    get:
      operationId: retrievePropertyLockCard
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        This method is used for retrieving information about a single card of the lock.
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      - name: lock:id
        in: path
        required: true
        description: A unique integer value identifying the lock.
        schema:
          type: string
      - name: card:id
        in: path
        required: true
        description: A unique integer value identifying the card.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Locks.Cards
    delete:
      operationId: deletePropertyLockCard
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        This method is used to delete the card from the lock.
      
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      - name: lock:id
        in: path
        required: true
        description: A unique integer value identifying the lock.
        schema:
          type: string
      - name: card:id
        in: path
        required: true
        description: A unique integer value identifying the card.
        schema:
          type: string
      responses:
        '204':
          $ref: '#/components/responses/204_Deleted'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Locks.Cards

# PROPERTIES LOCKS ACCESSES
  /api/v1/properties/{properties:id}/locks/{lock:id}/accesses/:
    get:
      operationId: listPropertyLockAccesses
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">

        ---
        This method is used for retrieving information about a single lock's accesses.
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      - name: lock:id
        in: path
        required: true
        description: A unique integer value identifying the lock.
        schema:
          type: string

      responses:
        '200':
          $ref: '#/components/responses/200_OK_Locks_Access_Paginated'

        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Locks.Accesses
# PROPERTIES LOCKS KEYS PATHS
  /api/v1/properties/{properties:id}/locks/{lock:id}/keys/:
    get:
      operationId: listPropertyKeys
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        
        This method is used for retrieving a list key-codes.
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      - name: lock:id
        in: path
        required: true
        description: A unique integer value identifying the lock.
        schema:
          type: string
      responses:
        '200':
            $ref: '#/components/responses/200_OK_Keys_Paginated'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Locks.Keys
    post:
      operationId: createPropertyLockKey
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        This method is used to create a single key-code.
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      - name: lock:id
        in: path
        required: true
        description: A unique integer value identifying the lock.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Key'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Locks.Keys
  /api/v1/properties/{properties:id}/locks/{lock:id}/keys/{key:id}/:
    get:
      operationId: retrievePropertyLockkey
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        
        This method is used for retrieving a single key-code.
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      - name: lock:id
        in: path
        required: true
        description: A unique integer value identifying the lock.
        schema:
          type: string
      - name: key:id
        in: path
        required: true
        description: A unique integer value identifying the card.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Locks.Keys
    delete:
      operationId: deletePropertyLockkey
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope"><br>
        
        ---
        Remove key from property.
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      - name: lock:id
        in: path
        required: true
        description: A unique integer value identifying the booking.
        schema:
          type: string
      - name: key:id
        in: path
        required: true
        description: A unique integer value identifying the card.
        schema:
          type: string
      responses:
        '204':
          $ref: '#/components/responses/204_Deleted'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Locks.Keys
# PROPERTIES AVAILABILITY PATHS
  /api/v1/properties/{properties:id}/available/:
    post:
      operationId: checkPropertyDailyAvailability
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        <br>
        This method is used for retrieving information about availability of a property.
        <br> 
        ONLY WORKS FOR DAILY  BOOKING TYPE.
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DailyAvailablePost'
      responses:
        '200':
          description: 'The property can be booked.'
        '409':
          description: 'The property cannot be booked.'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Availability
    get:
      operationId: getPropertyHourlySlotsAvailability
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        <br>
        This endpoint is used to retrieve free slots for a date. Works only on properties with HOURLY booking type - otherwise returns 400.
        Slots can be empty with 200 OK, which means the property can be booked today, but there are no available slots.
        <br>
        IF THE PROPERTY IS NOT AVAILABLE AT THAT DAY - returns 409 with empty slots array.
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      - name: date
        in: query
        required: true
        description: A date for the check.
        schema:
          type: string
          example: '2020-02-12'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SlotsList'
          description: 'The property can be booked and the slots are available.'
        '409':

          description: 'The property cannot be booked.'

        '404':
          $ref: '#/components/responses/404_Not_Found'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.Availability
# PropertiesAPI.AvailabilityExceptions
  /api/v1/properties/{properties:id}/availability-exceptions/:
    post:
      operationId: addPropertyAvailabilityException
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        <br>
        This method is used for adding availability exceptions for the property.
        
        <br> Requires `can_edit` permissions for the property.
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AvailabilityException'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailabilityException'
          description: 'OK. Created.'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.AvailabilityExceptions
    get:
      operationId: getPropertyAvailabilityExcetions
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        <br>
        This method is used for accessing a list of availability exceptions for the property.
        
        <br> Requires `can_edit` permissions for the property.
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200_OK_AvailabilityException_Paginated'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.AvailabilityExceptions
  /api/v1/properties/{properties:id}/availability-exceptions/delete/:
    post:
      operationId: deletePropertyAvailabilityExceptions
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        <br>
        This method is used for adding availability exceptions for the property.
        
        <br> Requires `can_edit` permissions for the property.
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkDeleteById'
      responses:
        '204':
          description: 'Ok. Deleted.'

        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.AvailabilityExceptions


# USER PATHS
  /api/v1/user/:
    get:
      operationId: retrieveUser
      description:
        |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope"><br>
        
        ---
        Retrieve information about the authenticated user with that endpoint. <br>
        
      #parameters:
      #  - in: query
      #    name: expand
      #    schema:
      #      type: array
      #      items:
      #        type: string
      #    style: form
      #    explode: false
      #    examples:
      #      oneId:
      #        summary: Example of a single parameter
      #        value: ["emails"]   # ?ids=5
      #      multipleIds:
      #        summary: Example of multiple parameters
      #        value: ["emails", "docs"]   # ?ids=1,5,7
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI
    put:
      operationId: updateUser
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope"><br>
        
        ---
        Update current authenticated user with that endpoint.
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI
# USER.LOCK-MESSAGES
  /api/v1/user/lock-requests/:
    get:
      operationId: listUserLockRequests
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        <br>
        This method is used for retrieving a list of user's lock requests.
      responses:
        '200':
            $ref: '#/components/responses/200_OK_LockMessagePaginated'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
      tags:
      - UserAPI.LockRequests
    post:
      operationId: createUserLockRequest
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        
        ---
        <br>
        This method is used to create a new lock request for the authenticated user.
      
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User_LockMessage'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_LockMessage'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.LockRequests
# USER USERPIC
  /api/v1/user/userpic/:
    put:
      operationId: uploadUserPic
      description: ''
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserImageToUpload'
      responses:
        '200':
          description: 'OK.'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserPic
    delete:
      operationId: deleteUserPic
      description: ''
      responses:
        '204':
          description: 'Deleted successfully.'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserPic
# USER ACCOUNT-RELATED INFO
  /api/v1/user/plan/:
    get:
      operationId: retrieveUserPlan
      description:
        Retrieve information about current user's plan
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
          description: ''
        '404':
          description: ''
      tags:
      - UserAPI.Plan
    delete:
      operationId: deleteUserPlan
      description: Reset current user's plan to default
      responses:
        '204':
          description: '204 No Content'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.Plan

  /api/v1/user/plan/corp/:
    get:
      operationId: get_corp_status
      description:
       Get information about current user's request to have a corp plan
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorpPlan'
          description: ''
        '404':
          description: 'If the user has not submitted a request.'
      tags:
      - UserAPI.Plan
    put:
      operationId: setCorpPlan
      description: send a request to have a corp plan
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorpPlan'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorpPlan'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
        - UserAPI.Plan

  /api/v1/user/plan/pro/:
    get:
      operationId: get_pro_status
      description:
       Get information about current user's request to have a corp plan
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProPlan'
          description: ''
        '404':
          description: 'If the user has not submitted a request.'
      tags:
      - UserAPI.Plan
    put:
      operationId: setProPlan
      description: send a request to have a corp plan
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProPlan'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProPlan'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
        - UserAPI.Plan
# USER-RELATED ENTITIES
  /api/v1/user/properties/:
    get:
      operationId: retrieveUserProperties
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope"><br>
        
        ---
        Retrieve a list of properties for the authenticated user. Note that a property will be listed if it's either been created by the authenticated user or the authenticated user has owner privileges (e.g. listed as property-owner, see `properties:owners` scope.
      responses:
        '200':
          $ref: '#/components/responses/200_OK_Properties_Paginated'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserRelatedEntities
  /api/v1/user/properties/favorite/:
    get:
      operationId: retrieveUserFavoriteProperties
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope"><br>
        
        ---
        Retrieve a list of favorite properties for the authenticated user.
      responses:
        '200':
          $ref: '#/components/responses/200_OK_Properties_Paginated'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserRelatedEntities
  
  /api/v1/user/bookings/:
    get:
      operationId: retrieveUserBookings
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope"><br>
        
        ---

        Retrieve a list of bookings for the authenticated user. Bookings with all statuses will be listed (e.g. `AWAITING` - meaning that the property requires additional approval for booking and the owner hasn't given it yet).
      responses:
        '200':
          $ref: '#/components/responses/200_OK_Bookings_Paginated'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserRelatedEntities
# COMMON ENDPOINTS
  /api/v1/common/property-types/:
    get:
      operationId: listPropertyTypes
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope"><br>
        
        ---
        Retrieve a list of property types.
      
      responses:
        '200':
          $ref: '#/components/responses/200_OK_CommonPropertyTypes_Paginated'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - CommonAPI
  /api/v1/common/cities/:
    get:
      operationId: listSupportedCities
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope"><br>
        
        ---
        Retrieve a list of supported cities.
      responses:
        '200':
          $ref: '#/components/responses/200_OK_CommonCities_Paginated'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - CommonAPI
# COMMS ENDPOINTS 

  /api/v1/user/change_password/:
    put:
      operationId: changePassword
      description: |
        Takes the new password and it's confirmation as well as the old password and
        changes user's password to the new one.
        <br>

        <h4>The request must be sent with a valid access token.</h4>
        <br><img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Completed"> <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Tested">
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'
      responses:
        '204':
          description: '204 No Content'
        #'400':
          #$ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.Security
  /api/v1/user/reset_password/:
    put:
      operationId: resetPassword
      description: |
        <h4>The request must be sent with a valid access token.</h4>
        <br><img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Completed"> <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Tested">

      responses:
        '200':
          description: ''
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        #'400':
          #$ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.Security
components:
  schemas:
    Current_user_actions:
          type: object
          properties:
            is_in_favorites:
              type: boolean
              example: true
          readOnly: true
    PropertyList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        title:
          type: string
          maxLength: 50
          example: "The Best Property Out There"
        body:
          type: string
          example: "Description of the Best Property"
        price:
          type: number
          example: 999
        active:
          type: boolean
          example: true
        property_type:
          type: integer
          enum: [100, 200, 300]
          example: 100
        booking_type:
          type: integer
          enum: [100, 200]
          example: 100
        visibility:
          type: integer
          enum: [100, 200, 300]
          example: 100
        main_image:
          type: string
          readOnly: true
          example: "http://testserver/media/5500e68537c740898615ad80466d0942.png"
        property_address:
          $ref: "#/components/schemas/PropertyAddress"
        current_user_permissions:
          $ref: "#/components/schemas/CurrentUserPermissions"
        current_user_actions:
          $ref: "#/components/schemas/Current_user_actions"
        client_greeting_message:
          type: string
          readOnly: false
          example:
            "Some nice message to greet a client."
        requires_additional_confirmation:
          type: boolean
          example: false
        created_at:
          type: string
          readOnly: true
          example: "2020-12-19T04:53:34+0300"
        updated_at:
          type: string
          readOnly: true
          example: "2020-12-19T04:53:34+0300"
    AddedBy:
      type: object
      readOnly: true
      properties:
        id:
          type: number
          example: 1
        email:
          type: string
          example: "janedoe@test.com"
        first_name:
          type: string
          example: "Имя"
        last_name:
          type: string
          example: "Фамилия"
        middle_name:
          type: string
          example: "Отчество"
        timezone:
          type: "string"
          example: "Europe/Moscow"
    PropertyGroupMemberPermissions:
      readOnly: true
      type: object
      properties:
        can_add_properties:
          type: boolean
          example: false
        can_delete_properties:
          type: boolean
          example: false
        can_book_properties:
          type: boolean
          example: false
        recursive_ownership:
          type: boolean
          example: false
        can_add_members:
          type: boolean
          example: false
        can_manage_members:
          type: boolean
          example: false
        can_remove_members:
          type: boolean
          example: false
        created_at:
          type: string
          example: "2021-03-19T02:33:36+0300"
          readOnly: true
        updated_at:
          type: string
          example: "2021-03-19T02:33:36+0300"
          readOnly: true

    PropertyGroupInfo:
      type: object
      readOnly: true
      properties:
        group_id:
          type: integer
          example: 1
        title:
          type: string
          example: "Storages"
        description:
          type: string
          example: "Storages"
        added_by:
          $ref: "#/components/schemas/AddedBy"
    Property:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        title:
          type: string
          maxLength: 50
          example: "The Best Property Out There"
          description: "Name of the property."
        body:
          type: string
          example: "Description of the Best Property"
          description: "Description of the property"
          maxLength: 1024
        price:
          type: number
          example: 999
          description: "Price of the property."
          maximum: 500000
        availability:
          $ref: "#/components/schemas/Availability"
          description: "Availability parameters of the property."
        is_owner:
          type: boolean
          example: true
          readOnly: true
          description: "Whether the authenticated user is an owner."
        current_user_permissions:
          $ref: "#/components/schemas/CurrentUserPermissions"
          description: "Current permissions of the authenticated user."
        current_user_actions:
          $ref: "#/components/schemas/Current_user_actions"
          description: "Current action flags of the authenticated user."
        active:
          type: boolean
          example: true
          description: "Whether the property shows in search and list of all properties."
        property_type:
          type: integer
          example: 100
          description: "Code for the type of the property."
        booking_type:
          type: integer
          enum: [100, 200]
          example: 100
          description: |
            Code for the booking type of the property.
            <br>
            - `100`: Daily booking type
            - `200`: Hourly booking type
        visibility:
          type: integer
          enum: [100, 150, 200, 250]
          example: 100
          description: |
            Code for the visibility of the property.
            <br>
            - `100`: Publicly Visible
            - `150`: Visible withing the organisation, if the property is connected to one.
            - `200`: Visible only for owners.
            - `250`: Visible withing property-group, if property is connected to one.
            <br>If user chooses `150` or `250` codes and the property is not in an organsation or in a group
            then code `200` is used.
        main_image:
          type: string
          readOnly: true
          example: "http://testserver/media/5500e68537c740898615ad80466d0942.png"
          description: "Main image of the property."
        contacts:
          type: array
          items:
            $ref: "#/components/schemas/Contact"
          readOnly: true
          description: "Contact info of owners."
        property_address:
          $ref: "#/components/schemas/PropertyAddress"
          description: "Address of the property."
        property_images:
          type: array
          items:
            $ref: "#/components/schemas/PropertyImageToRepr"
          readOnly: true
          description: "Images of the property."
        client_greeting_message:
          type: string
          readOnly: false
          example:
            "Some nice message to greet a client."
          description: "Greeting message for clients from the owners."
        requires_additional_confirmation:
          type: boolean
          example: false
          description: "Whether the owner needs to approve bookings."
        groups_info:
          type: array
          readOnly: true
          items:
            $ref: "#/components/schemas/PropertyGroupInfo"
          description: "Information about tied groups."
        organisations_info:
          type: integer
          readOnly: true
          example: null
          description: "Information about tied organisations."
        favortires_marks:
          type: integer
          example: 1
          readOnly: true
          description: "Number of favorite marks."
        rating:
          readOnly: true
          type: string
          example: "3.51"
          description: "Rating of the property."
        views_info:
          type: object
          description: "Information about views."
          readOnly: true
          properties:
            views_today:
              type: integer
              example: 1

            views_overall:
              type: integer
              example: 1
            current_user_views_today: 
              type: integer
              example: 1
            current_user_views_overall:
              type: integer
              example: 1
        created_at:
          type: string
          readOnly: true
          example: "2020-12-19T04:53:34+0300"
        updated_at:
          type: string
          readOnly: true
          example: "2020-12-19T04:53:34+0300"
      required:
      - title
      - body
      - price
      - property_address
      - availability
    Availability:
      type: object
      properties:
        open_days:
          type: array
          items:
            type: integer
            enum:
              - 0
              - 1
              - 2
              - 3
              - 4
              - 5
              - 6
          description: "List of available weekdays for the property."
        departure_time_until:
          type: string
          example: "11:00"
          description: "Time limit until departure for clients (valid only for __DAILY__ bookings)"
        arrival_time_from:
          type: string
          example: "14:00"
          description: "Time limit of arrival for clients (valid only for __DAILY__ bookings)"
        maximum_number_of_clients:
          type: integer
          example: 11
          description: "Maximum number of clients for the property."
        available_until:
          type: string
          example: "14:00"
          description: "Time until which the property is available (valid only for __HOURLY__ bookings)"
        available_from:
          type: integer
          example: "08:00"
          description: "Time from which the property is available (valid only for __HOURLY__ bookings)"
        
    BulkDeleteById:
      type: object
      properties:
        ids:
          type: array
          items:
            type: integer
            example: 1    
    Contact:
      type: object
      properties:
        user_id:
          type: integer
          example: 2
          readOnly: true
        email:
          type: string
          example: "example@test.com"
          readOnly: true
        first_name:
          type: string
          example: "OwnerFirstName"
          readOnly: true
        userpic:
          type: string
          example: ""
          readOnly: true
        is_creator:
          type: boolean
          example: false
        email_confirmed:
          type: boolean
          example: false
        phone_confirmed:
          type: boolean
          example: false
    UserMember:
      readOnly: true
      type: object
      properties:
        id:
          type: integer
          example: 2
          readOnly: true
        email:
          type: string
          example: "example@test.com"
          readOnly: true
        first_name:
          type: string
          example: "OwnerFirstName"
          readOnly: true
        last_name:
          type: string
          example: "OwnerLastName"
          readOnly: true
        middle_name:
          type: string
          example: "OwnerMiddleName"
          readOnly: true
        timezone:
          type: boolean
          example: false
    AvailabilityException:
      type: object
      properties:
        id:
          type: integer
          example: 11
          readOnly: true
        datetime_start:
          type: string
          example: "2021-04-01T12:00:00+0300"
        datetime_end:
          type: string
          example: "2021-04-01T13:00:00+0300"
        
    Member:
      type: object
      properties:
        id:
          type: integer
          example: 11
          readOnly: true
        user:
          $ref: "#/components/schemas/UserMember"
        email:
          type: string
          example: "example@test.com"
        is_creator:
          type: boolean
          example: false
          readOnly: true
        can_add_properties:
          type: boolean
          example: false
        can_delete_properties:
          type: boolean
          example: false
        can_book_properties:
          type: boolean
          example: false
        recursive_ownership:
          type: boolean
          example: false
        can_add_members:
          type: boolean
          example: false
        can_manage_members:
          type: boolean
          example: false
        can_remove_members:
          type: boolean
          example: false
        created_at:
          type: string
          example: "2021-03-19T02:33:36+0300"
          readOnly: true
        updated_at:
          type: string
          example: "2021-03-19T02:33:36+0300"
          readOnly: true
      required:
        - email
        - can_add_properties
        - can_delete_properties
        - can_book_properties
        - recursive_ownership
        - can_add_members
        - can_manage_members
        - can_remove_members
          
    Group:
      type: object
      properties:
        id:
          type: integer
          example: 11
          readOnly: true
          description: "Id of the group"
        title:
          type: string
          example: "Storages"
          description: "Name of the group"
        description:
          type: string
          example: "Storages"
          description: "Description of the group"
        current_user_permissions:
          readOnly: true
          $ref: "#/components/schemas/PropertyGroupMemberPermissions"
        is_my_group:
          type: boolean
          example: true
          readOnly: true
          description: "Whether the authenticated user created a group."
        created_at:
          type: string
          example: "2021-03-19T02:33:08+0300"
          readOnly: true
        updated_at:
          type: integer
          example: "2021-03-19T02:33:08+0300"
          readOnly: true
      required:
        - title
        - description
    CommonCities:
      type: object
      properties:
        name:
          type: string
          example: "Moscow"
          description: "Name of the city that must be used in requests due to validation"
        display_name:
          type: string
          example: "Moscow, Russia"
          description: "Name with country and region where available"
        locale_name:
          type: string
          example: "Москва"
          description: "Localized name of the city"
        timezone:
          type: string
          example: "Europe/Moscow"
          description: "Timezone of the city"
    CommonPropertyTypes:
      type: object
      properties:
        property_type:
          type: integer
          example: 100
          description: "Code of the property type that must be used in requests."
        title:
          type: string
          example: "Short name of the property type"
          description: "Short name of the property type"
        description:
          type: string
          example: "Description of the property type"
          description: "Description of the property type"

    Owner:
      type: object
      readOnly: true
      properties:
        owner_id:
            type: integer
            readOnly: true
            description: "Unique Id of the owner - used for CRUD operations in OwnersAPI."
        user_id:
            type: integer
            readOnly: true
            description: "Unique Id of the user."
        has_super_owner_permissions:
            type: boolean
            example: true
            description: "Sets all permissions or indicates that the owner has all permissions."
        can_edit:
            type: boolean
            example: true
            description: "Whether the user can edit the property."
        can_delete:
            type: boolean
            example: true
            description: "Whether the user can delete the property."
        can_add_images:
            type: boolean
            example: true
            description: "Whether the user can add images."
        can_delete_images:
            type: boolean
            example: true
            description: "Whether the user can delete images."
        can_add_bookings:
            type: boolean
            example: true
            description: "Whether the user can add bookings."
        can_manage_bookings:
            type: boolean
            example: true
            description: "Whether the user can update/approve/cancel bookings."
        can_add_owners:
            type: boolean
            example: true
            description: "Whether the user can add owners."
        can_manage_owners:
            type: boolean
            example: true
            description: "Whether the user can update owners or change their permissions."
        can_delete_owners:
            type: boolean
            example: true
            description: "Whether the user can delete owners."
        can_add_locks:
            type: boolean
            example: true
            description: "Whether the user can add locks."
        can_manage_locks:
            type: boolean
            example: true
            description: "Whether the user can update locks."
        can_delete_locks:
            type: boolean
            example: true
            description: "Whether the user can delete locks."
        can_add_to_group:
            type: boolean
            example: true
            description: "Whether the user can add the property to groups."
        can_add_to_organisation:
            type: boolean
            example: true
            description: "Whether the user can add the property to organisations."
        is_creator:
            type: boolean
            readOnly: true
            example: true
            description: "Whether the user is the initial creator of the property."
        first_name:
            type: string
            example: "Имя"
            readOnly: true
        last_name:
            type: string
            example: "Фамилия"
            readOnly: true
        middle_name:
            type: string
            example: "Отчество"
            readOnly: true
        email:
            type: string
            example: "customer@lockandrent.ru"
            description: "Email of the added user."
        visibility:
          type: integer
          enum: [100, 200]
          example: 100
          description: "Whether the user is shown in contact info of the property (`100`) or not (`200`)."
        created_at:
          readOnly: true
          type: string
          example: "2020-12-17T00:43:42.148287+03:00"
        updated_at:
          readOnly: true
          type: string
          example: "2020-12-17T00:43:42.149282+03:00"
    PropertyAddress:
      type: object
      properties:
        country:
          type: string
          example: "Russia"
        city:
          type: string
          example: "Moscow"
        street:
          type: string
          example: "Таллинская"
        building:
          type: string
          example: "34"
        floor:
          type: string
          example: "5"
        number:
          type: string
          example: "520"
        zip_code:
          type: string
          example: "123458"
        directions_description:
          type: string
          example: "Some directions from the nearest metro station or smth."
    CurrentUserPermissions:
      type: object
      readOnly: true
      properties:
        has_super_owner_permissions:
            type: boolean
            readOnly: true
            example: true
            description: "Sets all permissions or indicates that the owner has all permissions."
        can_edit:
            type: boolean
            readOnly: true
            example: true
            description: "Whether the user can edit the property."
        can_delete:
            type: boolean
            readOnly: true
            example: true
            description: "Whether the user can delete the property."
        can_add_images:
            type: boolean
            readOnly: true
            example: true
            description: "Whether the user can add images."
        can_delete_images:
            type: boolean
            readOnly: true
            example: true
            description: "Whether the user can delete images."
        can_add_bookings:
            type: boolean
            readOnly: true
            example: true
            description: "Whether the user can add bookings."
        can_manage_bookings:
            type: boolean
            readOnly: true
            example: true
            description: "Whether the user can update/approve/cancel bookings."
        can_add_owners:
            type: boolean
            readOnly: true
            example: true
            description: "Whether the user can add owners."
        can_manage_owners:
            type: boolean
            readOnly: true
            example: true
            description: "Whether the user can update owners or change their permissions."
        can_delete_owners:
            type: boolean
            readOnly: true
            example: true
            description: "Whether the user can delete owners."
        can_add_locks:
            type: boolean
            readOnly: true
            example: true
            description: "Whether the user can add locks."
        can_manage_locks:
            type: boolean
            readOnly: true
            example: true
            description: "Whether the user can update locks."
        can_delete_locks:
            type: boolean
            readOnly: true
            example: true
            description: "Whether the user can delete locks."
        can_add_to_group:
            type: boolean
            readOnly: true
            example: true
            description: "Whether the user can add the property to groups."
        can_add_to_organisation:
            type: boolean
            readOnly: true
            example: true
            description: "Whether the user can add the property to organisations."
        is_creator:
            type: boolean
            readOnly: true
            example: true
            description: "Whether the user is the initial creator of the property."

    ImageToUpload:
      type: object
      properties:
        images:
          type: array
          items:
            type: string
            format: binary
    PropertyImageToRepr:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        image:
          type: string
          readOnly: true
          example: "http://testserver/media/5500e68537c740898615ad80466d0942.png"
        is_main:
          type: boolean
          readOnly: true
          example: true
        uploaded_at:
          type: string
          readOnly: true
          example: "2020-12-12T20:36:11+03:00"
    Booking:
      type: object
      properties:
        available_actions:
          type: object
          properties:
            status_can_be_updated:
              type: boolean
              example: true
              description: "Whether the current user can update status."
            number_of_clients_can_be_updated:
              type: boolean
              example: true
              description: "Whether the current user can update the number of clients."
            can_be_cancelled_by_user:
              type: boolean
              example: true
              description: "Whether the current user can cancel the booking."
          readOnly: true
        id:
          type: number
          example: 1
          readOnly: true
          description: "Id of the booking"
        booked_property:
          type: array
          description: "Information abouth the booked property."
          readOnly: true
          items:
            $ref: "#/components/schemas/PropertyList"
        number_of_clients:
          type: integer
          example: 1
          minimum: 0
          maximum: 1000
          description: "Number of clients"
        client_email:
          type: string
          description: "This parameter is required only if the booking is being created
          by an owner."
          example: "example@test.com"
        status:
          readOnly: true
          type: string
          enum: ["ACCEPTED", "AWAITING", "DECLINED", "EXPIRED", "CANCELLED_BY_OWNER", "CANCELLED_BY_USER"]
        booked_from:
          type: string
          example: "2020-12-17T03:00+0300"
          description: |
           - For `DAILY` bookings the accepted format is: `2020-12-17`
           - For `HOURLY` bookings the accepted format is: `2020-12-17T03:00`
           <br> For `HOURLY` bookings the time in the property timezone must be used.
        booked_until:
          type: string
          example: "2020-12-17T04:00+0300"
          description: |
           - For `DAILY` bookings the accepted format is: `2020-12-17`
           - For `HOURLY` bookings the accepted format is: `2020-12-17T03:00`
           <br> For `HOURLY` bookings the time in the property timezone must be used.
        booked_by:
          type: integer
          example: 57
          readOnly: true
        booked_by_info:
          readOnly: true
          description: "Information about the user who created the booking."
          type: object
          properties:
            fist_name:
              type: string
              example: "String"
              readOnly: true
            email:
              type: string
              example: "String"
              readOnly: true
        price:
          type: integer
          example: 5000
          readOnly: true
          description: "Price of the booking."
        timezone:
          type: string
          example: "Europe/Moscow"
          readOnly: true
          description: "Timezone in which the booked property is located."
        created_at:
          readOnly: true
          type: string
          example: "2020-12-12T20:36:11+03:00"
        updated_at:
          readOnly: true
          type: string
          example: "2020-12-12T20:36:11+03:00"
      required:
      - number_of_clients
      #- client_email
      - booked_from
      - booked_until
    BookingUpdate:
      type: object
      properties:
        available_actions:
          type: object
          properties:
            status_can_be_updated:
              type: boolean
              example: true
              description: "Whether the current user can update status."
            number_of_clients_can_be_updated:
              type: boolean
              example: true
              description: "Whether the current user can update the number of clients."
            can_be_cancelled_by_user:
              type: boolean
              example: true
              description: "Whether the current user can cancel the booking."
          readOnly: true
        id:
          type: number
          example: 1
          readOnly: true
          description: "Id of the booking"
        booked_property:
          type: array
          description: "Information abouth the booked property."
          readOnly: true
          items:
            $ref: "#/components/schemas/PropertyList"
        number_of_clients:
          type: integer
          example: 1
          minimum: 0
          maximum: 1000
          description: "Number of clients"
        client_email:
          type: string
          description: "Email of the client. <br> This parameter is required only if the booking is being created
          by an owner."
          readOnly: true
          example: "example@test.com"
        status:
          type: string
          enum: ["ACCEPTED", "AWAITING", "DECLINED", "EXPIRED", "CANCELLED_BY_OWNER", "CANCELLED_BY_USER"]
          description: |
           An owner can set following statuses:
            - `ACCEPTED`
            - `DECLINED`
        booked_from:
          type: string
          readOnly: true
          example: 
            oneOf: 
              - "2020-12-17T03:00+0300"
              - "2020-12-17"
        booked_until:
          type: string
          readOnly: true
          example: 
            oneOf: 
              - "2020-12-17T03:00+0300"
              - "2020-12-18"
        booked_by:
          type: integer
          example: 57
          readOnly: true
          description: "Id of the user who created the booking."
        booked_by_info:
          readOnly: true
          description: "Information about the user who created the booking."
          type: object
          properties:
            fist_name:
              type: string
              example: "String"
              readOnly: true
            email:
              type: string
              example: "String"
              readOnly: true
        price:
          type: integer
          example: 5000
          readOnly: true
          description: "Price of the booking."
        timezone:
          type: string
          example: "Europe/Moscow"
          readOnly: true
          description: "Timezone in which the booked property is located."
        created_at:
          readOnly: true
          type: string
          example: "2020-12-12T20:36:11+03:00"
        updated_at:
          readOnly: true
          type: string
          example: "2020-12-12T20:36:11+03:00"
    LockCreate:
      type: object
      properties:
        code:
          type: string
          example: "A21V1212"
    LockAccess:
      readOnly: true
      type: object
      properties:
        try_time:
          type: string
          example: "2020-12-12T20:36:11+03:00"
          readOnly: true
        result:
          type: boolean
          example: true
          readOnly: true
    Lock:
      type: object
      properties:
        lock_id:
          type: string
          example: "1"
          readOnly: true
          description: "Id of the tied lock."
        manufacturing_id:
          type: string
          example: "1"
          readOnly: true
          description: "Internal id of the tied lock."
        added_by:
          readOnly: true
          $ref: "#/components/schemas/AddedBy"
        description:
          type: string
          example: "Smart Lock on door 1"
          description: "Description of the lock from the owner."
        last_access_attempt:
          $ref: "#/components/schemas/LockAccess"
        local_ip: 
          type: string
          example: "192.168.0.1"
          readOnly: true
          description: "Local ip address of the lock."
        added_at:
          type: string
          readOnly: true
          example: "2020-11-25T23:36:11.562947+03:00"
        updated_at:
          type: string
          readOnly: true
          example: "2020-11-25T23:36:11.562947+03:00"
    SingleSlot:
      type: object
      properties:
        start:
          type: string
          example: "2021-02-09T21:00"
        end:
          type: string
          example: "2021-02-09T22:00"
    SlotsList:
      type: object
      properties:
        count:
          type: integer
          example: 1
        property_timezone:
          type: string
          example: "Europe/Moscow"
        available_slots:
          type: array
          items:
            $ref: "#/components/schemas/SingleSlot"
    DailyAvailablePost:
      type: object
      properties:
        booked_from:
          type: string
          example: "2021-02-01"
          description: "Start date."
        booked_until:
          type: string
          example: "2021-02-12"
          description: "End date"
        number_of_clients:
          type: integer
          example: 2
          description: "Number of clients to be booked."
    User:
      type: object
      properties:
        id:
          type: number
          example: 1
        email:
          type: string
          example: "janedoe@test.com"
        userpic:
          type: string
          example: ""
        first_name:
          type: string
          example: "Имя"
        last_name:
          type: string
          example: "Фамилия"
        middle_name:
          type: string
          example: "Отчество"
        bio:
          type: string
          example: "О себе"
        email_confirmed:
          type: boolean
          example: False
        phone_confirmed:
          type: boolean
          example: False
        plan: 
          type: string
          example: "DEFAULT"
        work_email:
          type: string
          example: "work_email@lockandrent.ru"
        use_work_email_incbookings: 
          type: boolean
          example: false
        use_work_email_outbookings:
          type: boolean
          example: false
        show_work_email_in_contact_info:
          type: boolean
          example: false
        client_rating:
          type: string
          example: "3.51"
          readOnly: true
        two_factor_auth:
          type: boolean
          example: False
        is_banned:
          type: boolean
          example: False
        tos_version:
          type: "string"
          example: "1.0"
        timezone:
          type: "string"
          example: "Europe/Moscow"
        dob:
          type: "string"
          example: "1970-01-01"
        gender:
          type: string
          example: "F"
        is_admin:
          type: boolean
          example: False
        date_created:
          type: string
          example: "2020-11-25T23:36:11.562947+03:00"
        last_updated:
          type: string
          example: "2020-11-25T23:36:11.562947+03:00"
    User_LockMessage:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        fio: 
          type: string
          example: "Jane Doe"
          readOnly: true
        email:
          type: string
          example: "string"
          readOnly: true
        selected_lock_id:
          type: integer
          example: 1
          enum: 
           - null 
           - 1 
        selected_lock_info:
          type: string
          readOnly: true
          example: "Lock Basic 1."
        phone:
          type: string
          example: "string"
        status:
          type: string
          readOnly: true
          enum:
            - "WAIT"
            - "OK"
            - "FAIL"
          example: "WAIT"
        comment:
          type: string
          example: "string"
        company:
          type: string
          example: "string"
        quantity:
          type: integer
          example: 1
        final_price:
          type: number
          readOnly: true
          example: 3000.99
        last_status_change:
          type: string
          example: "2021-03-17T18:52:20+0300"
          readOnly: true
    
    Key:
      type: object
      properties:
        id:
          type: integer
          example: 1
          readOnly: true
        lock:
          type: integer
          example: 1
          readOnly: true
        key:
          type: string
          example: "123411"
        access_start:
          type: string
          example: "2020-12-17T03:00+0300"
        access_stop:
          type: string
          example: "2020-12-18T03:00+0300"
    Card:
      type: object
      properties:
        id:
          type: integer
          example: 1
          readOnly: true
        lock:
          type: integer
          example: 1
          readOnly: true
        card_id:
          type: string
          example: "A23A12"
        is_master:
          type: boolean
          example: true
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          writeOnly: true
      required:
      - username
      - password
    TokenRefresh:
      type: object
      properties:
        refresh:
          type: string
      required:
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
      required:
      - token
    CancelBooking:
      type: object
      properties:
        cancelled_reason:
          type: string
          example: "A very good reason"
          readOnly: false
        
    ProPlan:
      type: object
      properties:
        requested_plan:
          type: string
          example: "PRO"
          readOnly: true
        client:
          type: integer
          example: 1
          readOnly: true
        status:
          type: string
          example: "APPROVED"
          readOnly: true
        status_changed_reason:
          type: string
          example: "OK"
          readOnly: true
        created_at:
          type: string
          example: "2021-03-17T18:52:20+0300"
          readOnly: true
        updated_at:
          type: string
          example: "2021-03-17T18:52:20+0300"
          readOnly: true
    CorpPlan:
      type: object
      properties:
        requested_plan:
          type: string
          example: "CORP"
          readOnly: true
        client:
          type: integer
          example: 1
          readOnly: true
        status:
          type: string
          example: "APPROVED"
          readOnly: true
        status_changed_reason:
          type: string
          example: "OK"
          readOnly: true
        created_at:
          type: string
          example: "2021-03-17T18:52:20+0300"
          readOnly: true
        updated_at:
          type: string
          example: "2021-03-17T18:52:20+0300"
          readOnly: true
    UserImageToUpload:
      type: object
      properties:
        images:
          type: string
          format: binary
    PropertyAddToGroup:
      type: object
      properties:
        properties:
          type: array
          items:
            type: integer
            example: 1
    DeleteMembersBulk:
      type: object
      properties:
        members:
          type: array
          items:
            type: integer
        
    PropertyGroupMembership:
      type: object
      properties:
        id:
          type: integer
          example: 1
        property:
          $ref: "#/components/schemas/Property"
        created_at:
          type: string
          example: "2021-03-17T18:52:20+0300"
          readOnly: true
        updated_at:
          type: string
          example: "2021-03-17T18:52:20+0300"
          readOnly: true

    Plan:
      type: object
      properties:
        plan:
          type: string
          example: "CORP"
          readOnly: true
        created_at:
          type: string
          example: "2021-03-17T18:52:20+0300"
          readOnly: true
        updated_at:
          type: string
          example: "2021-03-17T18:52:20+0300"
          readOnly: true
    401BadToken:
      description: "Invalid Token. Given token is not valid"
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
          example: [
                  "Invalid Token : Given token is not valid"
                  ]
        status_code:
          type: integer
          example: 401
    401Unauthorized:
      description: "Unauthorized : Authentication not provided."
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
          example: [
                  "Unauthorized : Authentication not provided."
                  ]
        status_code:
          type: integer
          example: 401
    PaginatedResponse:
      type: object
      properties:
        count:
          type: integer
          example: 7
        next:
          type: string
          example: "http://testserver/api/v1/<namespace:list>/?page=4"
        previous:
          type: string
          example: "http://testserver/api/v1/<namespace:list>/?page=2"
    Register:
      type: object
      properties:
        first_name:
          type: string
          writeOnly: true
        last_name:
          type: string
          writeOnly: true
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
      required:
      - first_name
      - last_name
      - password
      - password2
    ChangePassword:
      type: object
      properties:
        old_password:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
  parameters:
    # parameters for regestration and logging
    emailParam:
      name: email
      in: query
      description: Email of the user.
      required: true
      schema:
        type: string
        example: "test@test.com"
    firstNameParam:
      name: first_name
      in: query
      description: First name of the user.
      required: true
      schema:
        type: string
        example: "Jane"
    lastNameParam:
      name: last_name
      in: query
      description: Last of the user.
      required: true
      schema:
        type: string
        example: "Doe"
    passwordParam:
      name: password
      in: query
      description: Password for the user.
      required: true
      schema:
        type: string
        example: "qwerty1234"
    password2Param:
      name: password2
      in: query
      description: Password confirmation for the user.
      required: true
      schema:
        type: string
        example: "querty1234"
  responses:
    200_OK_Patch_User:
      description: Responce was processed
      content:
        application/json:
          schema:
            properties:
              access:
                type: string
                example:
              refresh:
                type: string
                example:
              personal_info:
                properties:
                  id:
                    type: number
                    example: 1
                  username:
                    type: string
                    example: "janedoe"
                  email:
                    type: string
                    example: "janedoe@test.com"
                  userpic:
                    type: string
                    example: ""
                  first_name:
                    type: string
                    example: "Newfirstname"
                  last_name:
                    type: string
                    example: "New-LastName"
                  patronymic:
                    type: string
                    example: "Отчество"
                  bio:
                    type: string
                    example: "О себе"
                  is_confirmed:
                    type: boolean
                    example: False
                  dob:
                    type: "string"
                    example: "1970-01-01"
                  gender:
                    type: string
                    example: "F"
                  is_admin:
                    type: boolean
                    example: False
                  properties_url:
                    type: string
                    example: "http://testserver/api/v1/user/properties/"
                  organisations_url:
                    type: string
                    example: "http://testserver/api/v1/user/orgs/"
                  bookings_url:
                    type: string
                    example: "http://testserver/api/v1/user/bookings/"
                  documents_url:
                    type: string
                    example: "http://testserver/api/v1/user/docs/"
                  billing_addresses_url:
                    type: string
                    example: "http://testserver/api/v1/user/billing_addresses/"
                  phones_url:
                    type: string
                    example: "http://testserver/api/v1/user/phones/"
                  emails_url:
                    type: string
                    example: "http://testserver/api/v1/user/emails/"
                  date_created:
                    type: string
                    example: "2020-11-25T23:36:11.562947+03:00"
                  last_updated:
                    type: string
                    example: "2020-11-25T23:36:11.562947+03:00"
    200_OK_Keys_Paginated:
      description: Responce was processed
      content:
        application/json:
          schema:
            properties:
              count:
                type: integer
                example: 7
              next:
                type: string
                example: "http://testserver/api/v1/properties/1/locks/1/keys/?page=4"
              previous:
                type: string
                example: "http://testserver/api/v1/properties/1/locks/1/keys/?page=2"
              results:
                  type: array
                  items:
                    $ref: "#/components/schemas/Key"
    200_OK_Cards_Paginated:
      description: Responce was processed
      content:
        application/json:
          schema:
            properties:
              count:
                type: integer
                example: 7
              next:
                type: string
                example: "http://testserver/api/v1/properties/1/locks/1/cards/?page=4"
              previous:
                type: string
                example: "http://testserver/api/v1/properties/1/locks/1/cards/?page=2"
              results:
                  type: array
                  items:
                    $ref: "#/components/schemas/Card"
    200_OK_Locks_Paginated:
      description: Responce was processed
      content:
        application/json:
          schema:
            properties:
              count:
                type: integer
                example: 7
              next:
                type: string
                example: "http://testserver/api/v1/properties/1/locks/?page=4"
              previous:
                type: string
                example: "http://testserver/api/v1/properties/1/locks/?page=2"
              results:
                  type: array
                  items:
                    $ref: "#/components/schemas/Lock"
    200_OK_Locks_Access_Paginated:
      description: Responce was processed
      content:
        application/json:
          schema:
            properties:
              count:
                type: integer
                example: 7
              next:
                type: string
                example: "http://testserver/api/v1/properties/1/locks/accesses/?page=4"
              previous:
                type: string
                example: "http://testserver/api/v1/properties/1/locks/accesses/?page=2"
              results:
                  type: array
                  items:
                    $ref: "#/components/schemas/LockAccess"
    200_OK_Owners_Paginated:
      description: Responce was processed
      content:
        application/json:
          schema:
            properties:
              count:
                type: integer
                example: 7
              next:
                type: string
                example: "http://testserver/api/v1/properties/1/owners/?page=4"
              previous:
                type: string
                example: "http://testserver/api/v1/properties/1/owners/?page=2"
              results:
                  type: array
                  items:
                    $ref: "#/components/schemas/Owner"
    200_OK_Properties_Paginated:
      description: Responce was processed
      content:
        application/json:
          schema:
            properties:
              count:
                type: integer
                example: 7
              next:
                type: string
                example: "http://testserver/api/v1/properties/?page=4"
              previous:
                type: string
                example: "http://testserver/api/v1/properties/?page=2"
              results:
                  type: array
                  items:
                    $ref: "#/components/schemas/Property"
    200_OK_Members_Paginated:
      description: Responce was processed
      content:
        application/json:
          schema:
            properties:
              count:
                type: integer
                example: 7
              next:
                type: string
                example: "http://testserver/api/v1/property-groups/members/?page=4"
              previous:
                type: string
                example: "http://testserver/api/v1/property-groups/members/?page=2"
              results:
                  type: array
                  items:
                    $ref: "#/components/schemas/Member"
    200_OK_Property_Member_Paginated:
      description: Responce was processed
      content:
        application/json:
          schema:
            properties:
              count:
                type: integer
                example: 7
              next:
                type: string
                example: "http://testserver/api/v1/property-groups/properties/?page=4"
              previous:
                type: string
                example: "http://testserver/api/v1/property-groups/properties/?page=2"
              results:
                  type: array
                  items:
                    $ref: "#/components/schemas/Property"
    200_OK_Bookings_Paginated:
      description: Responce was processed
      content:
        application/json:
          schema:
            properties:
              count:
                type: integer
                example: 7
              next:
                type: string
                example: "http://testserver/api/v1/properties/bookings/?page=4"
              previous:
                type: string
                example: "http://testserver/api/v1/properties/bookings/?page=2"
              results:
                  type: array
                  items:
                    $ref: "#/components/schemas/Booking"
    200_OK_CommonCities_Paginated:
      description: Responce was processed
      content:
        application/json:
          schema:
            properties:
              count:
                type: integer
                example: 7
              next:
                type: string
                example: "http://testserver/api/v1/common/cities/?page=4"
              previous:
                type: string
                example: "http://testserver/api/v1/common/cities/?page=2"
              results:
                  type: array
                  items:
                    $ref: "#/components/schemas/CommonCities"
    200_OK_CommonPropertyTypes_Paginated:
      description: Responce was processed
      content:
        application/json:
          schema:
            properties:
              count:
                type: integer
                example: 7
              next:
                type: string
                example: "http://testserver/api/v1/common/property-types/?page=4"
              previous:
                type: string
                example: "http://testserver/api/v1/common/property-types/?page=2"
              results:
                  type: array
                  items:
                    $ref: "#/components/schemas/CommonPropertyTypes"
    200_OK_Groups_Paginated:
      description: Responce was processed
      content:
        application/json:
          schema:
            properties:
              count:
                type: integer
                example: 7
              next:
                type: string
                example: "http://testserver/api/v1/property-groups/?page=4"
              previous:
                type: string
                example: "http://testserver/api/v1/property-groups/?page=2"
              results:
                  type: array
                  items:
                    $ref: "#/components/schemas/Group"
    200_OK_AvailabilityException_Paginated:
      description: Responce was processed
      content:
        application/json:
          schema:
            properties:
              count:
                type: integer
                example: 7
              next:
                type: string
                example: "http://testserver/api/v1/properties/1/availability-exceptions/?page=4"
              previous:
                type: string
                example: "http://testserver/api/v1/properties/1/availability-exceptions/?page=2"
              results:
                  type: array
                  items:
                    $ref: "#/components/schemas/AvailabilityException"
    
    200_OK_LockMessagePaginated:
      description: Responce was processed
      content:
        application/json:
          schema:
            properties:
              count:
                type: integer
                example: 7
              next:
                type: string
                example: "http://testserver/api/v1/property-groups/?page=4"
              previous:
                type: string
                example: "http://testserver/api/v1/property-groups/?page=2"
              results:
                  type: array
                  items:
                    $ref: "#/components/schemas/User_LockMessage"
    200_OK:
      description: Responce was processed
      content:
        application/json:
          schema:
            properties:
              access:
                type: string
                example:
              refresh:
                type: string
                example:
              personal_info:
                $ref: "#/components/schemas/User"
    404_Not_Found:
      description: "404 not found: resource doesn't exist."
      content:
        application/json:
          schema:
            properties:
              errors:
                type: array
                example: [
                  "Not Found" : "Resource does not exist"
                  ]
              status_code:
                type: integer
                example: 404
    403_Forbidden:
      description: "403 Forbidden : You do not have necessary permissions"
      content:
        application/json:
          schema:
            properties:
              errors:
                type: array
                example: [
                  "Forbidden : You do not have necessary permissions"
                  ]
              status_code:
                type: integer
                example: 403
    422_Invalid_Data_Property:
      description: "Invalid Data : Invalid data has been submitted"
      content:
        application/json:
          schema:
            properties:
              errors:
                type: array
                example: [
                  "parameter" : "explanation"
                  ]
              status_code:
                type: integer
                example: 422
    400_Bad_Request_Property:
      description: "400 Bad request"
      content:
        application/json:
          schema:
            properties:
              errors:
                type: array
                example: [
                  "Bad Request" : "Request was malformed or data was unacceptable. Try again with changed request."
                  ]
              status_code:
                type: integer
                example: 400
    204_Deleted:
      description: "204 No Content"
      content:
        application/json:
          schema:
            properties:
              status_code:
                type: integer
                example: 204
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
tags:
  - name: AuthAPI
    description: "Endpointss for authentication-related requests."
  - name: UserAPI
    description: "General Endpoints for the authenticated user."
  - name: UserAPI.UserRelatedEntities
    description: "Endpoints for the related entites of the authenticated user such as bookings or organisations."
  - name: UserAPI.UserPic
    description: "Endpoints for userpic of the authenticated user."
  - name: UserAPI.Security
    description: "Endpoints for account-related actions of the authenticated user, such as changing password."
  
  - name: UserAPI.LockRequests
    description: "Endpointss for lock purchase requests."
  - name: UserAPI.Plan
    description: "Endpoints for plan-related actions of the authenticated user, such as requesting a pro plan."
  - name: PropertiesAPI
    description: "General Endpoints for dealing with properties."
  #- name: CalendarAPI
  #  description: "API for the LockAndRent Calendar App"
  - name: PropertiesAPI.OwnersAPI
    description: "Endpoints for managing owners."
  - name: PropertiesAPI.Images
    description: "Endpoints for managing images for a property."
  - name: PropertiesAPI.Favorites
    description: "Endpoints for adding/deleting properties from fav."
  
  - name: PropertiesAPI.Locks
    description: "Endpoints for managing locks for a property. "
  - name: PropertiesAPI.Availability
    description: "Endpoints for accessing a property availability."

  - name: PropertiesAPI.AvailabilityExceptions
    description: "Endpoints for accessing availability exceptions."

  - name: PropertiesAPI.Locks.Accesses
    description: "Endpoints for managing lock accesses for a property. "
  - name: PropertiesAPI.Locks.Cards
    description: "Endpoints for managing lock cards for a property."
  - name: PropertiesAPI.Locks.Keys
    description: "Endpoints for managing lock keys for a property. "
  - name: BookingsAPI
    description: "Endpoint for managing bookings. Available only for property owners."
  - name: CommonAPI
    description: "Endpoints for LR Common Resources such as supported property types."
  - name: CommsAPI
    description: "Endpoints for LR Comms Operations such as creating a support request."
  - name: LockStoreAPI
    description: "Endpoints for LR LockStore resources such as a catalogue of available locks."
  
  - name: GroupsAPI
    description: "Endpoints for managing property groups."
  - name: GroupsAPI.Members
    description: "Endpoints for managing members of property groups."
  - name: GroupsAPI.Properties
    description: "Endpoints for managing properties of property groups."
  #- name: TripsAPI
  #  description: "Endpoints for managing trips."
  #- name: OrganisationsAPI
  #  description: "Endpoints for managing organisations."
  #- name: OrganisationsAPI.Members
  #  description: "Endpoints for managing members of organisations."
  #- name: OrganisationsAPI.Properties
  #  description: "Endpoints for managing properties of organisations."
  