openapi: 3.0.2
info:
  title: '294 Internal API Documentation'
  version: '0.0.1'
  description: "This API references methods that are implemented to the current date and are tested. Note that each method has a version and a date of release which is important in terms of correct requests and responces"
servers:
  #- url: http://api.example.com/v1
   # description: Optional server description, e.g. Main (production) server
  - url: http://api.yuiborodin.xyz
    description: main url for testing API
paths:
  /api/v1/property/{id}/:
    get:
      operationId: retrieveProperty
      description: 'This method is used for retrieving information about a
      particular property'
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'

          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
      tags:
      - Poperty API
    put:
      operationId: updateProperty
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'

          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
      tags:
      - Poperty API
    patch:
      operationId: partialUpdateProperty
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'

          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
      tags:
      - Poperty API
    delete:
      operationId: destroyProperty
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      responses:
        '204':
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'

          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
      tags:
      - Poperty API
  /api/v1/property/:
    get:
      operationId: listPropertys
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Property'
          description: ''
      tags:
      - Poperty API
    post:
      operationId: createProperty
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
          description: ''
      tags:
      - Poperty API
  /api/v1/profile/{id}/:
    get:
      operationId: retrieveProfile
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this profile.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
      tags:
      - Profile API
    put:
      operationId: updateProfile
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this profile.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
      tags:
      - Profile API
    patch:
      operationId: partialUpdateProfile
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this profile.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
      tags:
      - Profile API
    delete:
      operationId: destroyProfile
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this profile.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - Profile API
  /api/v1/profile/:
    get:
      operationId: listProfiles
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Profile'
          description: ''
      tags:
      - Profile API
  /api/v1/auth/register/:
    post:
      operationId: createregistration
      description: 'This method allows to a person register an account'
      parameters:
       - $ref: '#/components/parameters/firstNameParam'
       - $ref: '#/components/parameters/lastNameParam'
       - $ref: '#/components/parameters/emailParam'
       - $ref: '#/components/parameters/passwordParam'
       - $ref: '#/components/parameters/password2Param'

      requestBody:
        content:
          application/json:
            schema:
              properties:
                first_name:
                  type: string
                  writeOnly: true
                last_name:
                  type: string
                  writeOnly: true
                email:
                  type: string
                  writeOnly: true
                password:
                  type: string
                  writeOnly: true
                password2:
                  type: string
                  writeOnly: true
              required:
              - first_name
              - last_name
              - password
              - password2
      responses:
        '201':
          $ref: '#/components/responses/200_OK'
      tags:
      - Token-Related API
  /api/v1/auth/token/:
    post:
      operationId: createTokenObtainPair
      description: 'Takes a set of user credentials and returns an access and refresh
        JSON web

        token pair to prove the authentication of those credentials.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
      responses:
        '200':
          $ref: '#/components/responses/200_OK'
      tags:
      - Token-Related API
  /api/v1/auth/token/refresh/:
    post:
      operationId: createTokenRefresh
      description: 'Takes a refresh type JSON web token and returns an access type
        JSON web

        token if the refresh token is valid.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
      tags:
      - Token-Related API
  /api/v1/auth/token/verify/:
    post:
      operationId: createTokenVerify
      description: 'Takes a token and indicates if it is valid.  This view provides
        no

        information about a token''s fitness for a particular use.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
      tags:
      - Token-Related API
components:
  schemas:
    Property:
      type: object
      properties:
        author_id:
          type: string
          readOnly: true
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 50
        body:
          type: string
        price:
          type: integer
        active:
          type: boolean
        image:
          type: string
      required:
      - title
      - body
      - price

    Profile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        first_name:
          type: string
          readOnly: true
        last_name:
          type: string
          readOnly: true
        username:
          type: string
          readOnly: true
        account_type:
          enum:
          - ADMIN
          - STAFF
          - OWNER
          - CLIENT
          - OTHER
          type: string
        email:
          type: string
          readOnly: true
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          writeOnly: true
      required:
      - username
      - password
    TokenRefresh:
      type: object
      properties:
        refresh:
          type: string
      required:
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
      required:
      - token
    401BadToken:
      description: "Invalid Token. Given token is not valid"
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
          example: [
                  "Invalid Token : Given token is not valid"
                  ]
        status_code:
          type: integer
          example: 401
    401Unauthorized:
      description: "Unauthorized : Authentication not provided."
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
          example: [
                  "Unauthorized : Authentication not provided."
                  ]
        status_code:
          type: integer
          example: 401
    Register:
      type: object
      properties:
        first_name:
          type: string
          writeOnly: true
        last_name:
          type: string
          writeOnly: true
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
      required:
      - first_name
      - last_name
      - password
      - password2
  parameters:
    # parameters for regestration and logging
    emailParam:
      name: email
      in: query
      description: Email of the user.
      required: true
      schema:
        type: string
        example: "test@test.com"
    firstNameParam:
      name: first_name
      in: query
      description: First name of the user.
      required: true
      schema:
        type: string
        example: "Jane"
    lastNameParam:
      name: last_name
      in: query
      description: Last of the user.
      required: true
      schema:
        type: string
        example: "Doe"
    passwordParam:
      name: password
      in: query
      description: Password for the user.
      required: true
      schema:
        type: string
        example: "qwerty1234"
    password2Param:
      name: password2
      in: query
      description: Password confirmation for the user.
      required: true
      schema:
        type: string
        example: "querty1234"

  responses:
    200_OK:
      description: Responce was processed
      content:
        application/json:
          schema:
            properties:
              access:
                type: string
                example:
              refresh:
                type: string
                example:
              personal_info:
                properties:
                  account_id:
                    type: number
                    example: 1
                  first_name:
                    type: string
                    example: "Jane"
                  last_name:
                    type: string
                    example: "Doe"
                  account_type:
                    type: string
                    example: "OWNER"
    404_Not_Found:
      description: "404 not found: resource doesn't exist."
      content:
        application/json:
          schema:
            properties:
              errors:
                type: array
                example: [
                  "Not Found : Resource does not exist"
                  ]
              status_code:
                type: integer
                example: 404
    403_Forbidden:
      description: "403 Forbidden : You do not have necessary permissions"
      content:
        application/json:
          schema:
            properties:
              errors:
                type: array
                example: [
                  "Forbidden : You do not have necessary permissions"
                  ]
              status_code:
                type: integer
                example: 403
