openapi: 3.0.2
info:
  title: '294 Internal API Documentation'
  version: '1'
  description: |
    # General Information
    ## About the API
    This API references methods that are __implemented or _to be implemented_ to the current date__. API will reference not only methods that are used for front-end development but also for the embedded developers. For more information about the changes in methods please refer to __CHANGELOG__ in the Gitlab internal [repository](https://git.miem.hse.ru/294/web-294).
    
    ---
    ## API Overview
      - ### User Related Info
        - Insert user related info.
      
      - ### Properties Related Info
        - Insert user related info.
      
    ---
    ## Useful Links
      - [Current Database Schema](https://git.miem.hse.ru/yuiborodin)
      - [Current Backend API Functionality Schema](https://git.miem.hse.ru/yuiborodin)
      - [Current Workflow Schema](https://git.miem.hse.ru/yuiborodin)
      - [Backend Changelog](https://git.miem.hse.ru/yuiborodin)

    ---
    ## Conventions
    In this documentation file accepted conventions are as listed below. <br>
    Completed methods are marked as <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
    <br>Tested methods marked as <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
    <br>
    <br>
    __*!!!  METHODS THAT DO NOT HAVE "TEST" LABEL ARE NOT SUITABLE FOR PRODUCTION USE.<br> METHODS THAT ARE NOT MARKED AS COMPLETED ARE NOT AVAILABLE YET*.__

    ---
    ## Current issues to consider:
      * *Replace http for https for the server url in order to securely use API from outside.*
      * *Due to Swagger UI bug endpoints are not shown in an order they are
      supposed to.*
      * *Endpoints for password reset and phone confirmations are not yet available
      due to some internal issues.*
    ---
    <h4 align="center"> Author: Yury Borodin </h4>
    <h5 align="center"> Gitlab: [yuiborodin](https://git.miem.hse.ru/yuiborodin)
    <br> VK: [borodin.yury](https://vk.com/borodin.yury)
    <br> Email: <a href="mailto:yuiborodin@miem.hse.ru">yuiborodin@miem.hse.ru</a></h5>
    ---
  contact:
    name: Urgent LockAndRent API Support
    email: api_support@lockandrent.ru
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://api.lockandrent.ru
    description: main url for testing API
paths:
  # AUTH PATHS
  /api/v1/auth/register/:
    post:
      operationId: createregistration
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
        This method is used for account registration
      requestBody:
        content:
          application/json:
            schema:
              properties:
                first_name:
                  type: string
                  writeOnly: true
                last_name:
                  type: string
                  writeOnly: true
                email:
                  type: string
                  writeOnly: true
                password:
                  type: string
                  writeOnly: true
                password2:
                  type: string
                  writeOnly: true
              required:
                - first_name
                - last_name
                - password
                - password2
      responses:
        '201':
          $ref: '#/components/responses/200_OK'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
        - AuthAPI
  /api/v1/auth/token/:
    post:
      operationId: createTokenObtainPair
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
        Takes a set of user credentials and returns an access and refresh
        JSON web token pair to prove the authentication of those credentials.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
      responses:
        '200':
          $ref: '#/components/responses/200_OK'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
        - AuthAPI
  /api/v1/auth/token/refresh/:
    post:
      operationId: createTokenRefresh
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
        Takes a refresh type JSON web token and returns an access type
          JSON webtoken if the refresh token is valid.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
        - AuthAPI
  /api/v1/auth/token/verify/:
    post:
      operationId: createTokenVerify
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
          Takes a token and indicates if it is valid.  This view provides
          no information about a token's fitness for a particular use.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
        - AuthAPI
  /api/v1/auth/logout/:
    post:
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
        Takes a given refresh token and blacklists it.
        - Requires access token (isAuthenticated permission) passed with the request.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
      responses:
        '205':
          description: '205 Reset Content'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
        - AuthAPI
  /api/v1/auth/logoutall/:
    post:
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
        Blacklists all tokens associated with the user that sent the request.
        - Requires access token (isAuthenticated permission) passed with the request.
      parameters: []
      responses:
        '205':
          description: '205 Reset Content'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
        - AuthAPI
# PROPERTIES PATHS
  /api/v1/properties/{properties:id}/:
    get:
      operationId: retrieveProperty
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
        <br>
        This method is used for retrieving information about a
        particular property
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI
    patch:
      operationId: updateProperty
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
        <br>This method is used for retrieving information about a particular property.
        <br>Updatable fields:

          - `title`

          - `body`

          - `price`

          - `active`

          - `property_type`

          - `visibility`

          - `property_address`

          - `client_greeting_message`
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI
    delete:
      operationId: destroyProperty
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
        <br>This method is used for delete action for a particular property.
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      responses:
        '204':
          $ref: '#/components/responses/204_Deleted'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI
  /api/v1/properties/:
    get:
      operationId: listPropertys
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
        <br>This method is used for retrieving a list of properties.
        <br> All properties with visibility level of 100 will be shown here.
        <br>*Search (filtering) functionality will be added soon.*
      parameters: []
      responses:
        '200':
          $ref: '#/components/responses/200_OK_Properties_Paginated'
      tags:
      - PropertiesAPI
    post:
      operationId: createProperty
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
        <br>This method is used for creating a property.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
          description: ''
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI
# PROPERTIES BOOKINGS PATHS
  /api/v1/properties/bookings/:
    get:
      operationId: listPropertiesBooking
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
        This method is used for retrieving a list of *incoming* bookings for all properties of the
        authenticaeted user.
        <br> In order to access the authenticated user's *outcoming* bookings, use
        `user:bookings` scope.
        <br> *Search (filtering) functionality is not yet supported.*
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - $ref: '#/components/schemas/Booking'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401

          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.PropertyAttributes.Bookings

  /api/v1/properties/{properties:id}/bookings/:
    get:
      operationId: listPropertyBooking
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
        This method is used for retrieving a list of bookings for the property with `properties:id`.
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - $ref: '#/components/schemas/Booking'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.PropertyAttributes.Bookings
    post:
      operationId: createPropertyBooking
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        ---
        <br>Use this endpoint in order to create a booking for a particular property.
        <br> *This endpoint could be used by any authenticated user. If the owner of the property
        doest the booking, the status is automatically set to `ACCEPTED`*.
        <br> *The `AWAITING` and `DECLINED` statuses are used only if the
        property has `need_confirmation` parameter set to `true` and could be changed via `patch`
        requests.*
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
            content:
              application/json:
                schema:
                  oneOf:
                    - $ref: '#/components/schemas/401BadToken'
                    - $ref: '#/components/schemas/401Unauthorized'
                example:
                  errors: [ "Invalid Token : Given token is not valid"
                  ]
                  status_code: 401
            description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
            $ref: '#/components/responses/403_Forbidden'
        '422':
            $ref: '#/components/responses/422_Invalid_Data'
        '400':
            $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.PropertyAttributes.Bookings
  /api/v1/properties/{properties:id}/bookings/{bookings:id}:
    get:
      operationId: retrievePropertyBooking
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        This method is used for retrieving information about a
        particular property
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      - name: bookings:id
        in: path
        required: true
        description: A unique integer value identifying the booking.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.PropertyAttributes.Bookings
    patch:
      operationId: updatePropertyBooking
      description: ''
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      - name: bookings:id
        in: path
        required: true
        description: A unique integer value identifying the booking.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '422':
          $ref: '#/components/responses/422_Invalid_Data'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.PropertyAttributes.Bookings
    delete:
      operationId: destroyPropertyBooking
      description: ''
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      - name: bookings:id
        in: path
        required: true
        description: A unique integer value identifying the booking.
        schema:
          type: string
      responses:
        '204':
          $ref: '#/components/responses/204_Deleted'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'

      tags:
      - PropertiesAPI.PropertyAttributes.Bookings
# PROPERTIES OWNERS PATHS
  /api/v1/properties/{properties:id}/owners/:
    get:
      operationId: listPropertyOwners
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        This method is used for retrieving information about a
        particular property
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.PropertyAttributes.Owners
    post:
      operationId: createPropertyOwner
      description: ''
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
          description: ''
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.PropertyAttributes.Owners
  /api/v1/properties/{properties:id}/owners/{owners:id}:
    get:
      operationId: retrievePropertyOwner
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        This method is used for retrieving information about a
        particular property
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying the property.
        schema:
          type: string
      - name: owners:id
        in: path
        required: true
        description: A unique integer value identifying the booking.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.PropertyAttributes.Owners
    patch:
      operationId: updatePropertyOwner
      description: ''
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      - name: owners:id
        in: path
        required: true
        description: A unique integer value identifying the booking.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.PropertyAttributes.Owners
    delete:
      operationId: destroyPropertyOwner
      description: ''
      parameters:
      - name: properties:id
        in: path
        required: true
        description: A unique integer value identifying this property.
        schema:
          type: string
      - name: owners:id
        in: path
        required: true
        description: A unique integer value identifying the booking.
        schema:
          type: string
      responses:
        '204':
          $ref: '#/components/responses/204_Deleted'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.PropertyAttributes.Owners
# PROPERTIES IMAGES PATHS
  /api/v1/properties/images/:
    put:
      operationId: putPropertyImages
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        This method is used for retrieving information about a
        particular property

      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.PropertyAttributes.Images
    delete:
      operationId: deletePropertyImages
      description: ''
      parameters:
      - name: images
        in: query
        required: true
        description: Images for deletion.
        schema:
          type: array
          items:
            type: integer
        style: form
        explode: false
        examples:
          oneId:
            summary: Example of a Image delete
            value: [5]   # ?ids=5
          multipleIds:
            summary: Example of multiple Image delete
            value: [1, 5, 7]   # ?ids=1,5,7
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
          description: ''
        '422':
          $ref: '#/components/responses/422_Invalid_Data_Property'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.PropertyAttributes.Images
  /api/v1/properties/images/set_main_image/:
    put:
      operationId: putPropertyMainImage
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope">
        This method is used for retrieving information about a
        particular property
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
          description: ''
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401


          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - PropertiesAPI.PropertyAttributes.Images
# PROPERTIES LOCKS PATHS

# PROPERTIES AVAILABILITY PATHS

# USER PATHS
  /api/v1/user/:
    get:
      operationId: retrieveUser
      description:
        |
       <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope"><br>
        ---
        Retrieve information about the authenticated user with that endpoint. <br>

        Note that the user can choose which email is shown with the `user:emails`
        scope. By default, the email with which the user signed up is shown.

        Email visibility options are also shown in the `user:emails` scope.
      parameters:
        - in: query
          name: expand
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
          examples:
            oneId:
              summary: Example of a single parameter
              value: ["emails"]   # ?ids=5
            multipleIds:
              summary: Example of multiple parameters
              value: ["emails", "docs"]   # ?ids=1,5,7
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
      tags:
      - UserAPI
    patch:
      operationId: partialUpdateUser
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope"><br>
        ---
        Partialy update current authenticated user with that endpoint.

        Avalable request fileds for changing:

          - `first_name`

          - `last_name`

          - `patronymic`

          - `bio`

          - `dob`

          - `gender`

        <strong> Note that the username is not a changable field.
        Also, the in order to change the email a user must use the specific endpoint.
        </strong>
      requestBody:
        content:
          application/json:
            schema:
              properties:
                first_name:
                  type: string
                  writeOnly: true
                  example: "NewFirstName"
                last_name:
                  type: string
                  writeOnly: true
                  example: "New-Last-Name"
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
      tags:
      - UserAPI
# USER-RELATED ENTITIES
  /api/v1/user/properties/:
    get:
      operationId: retrieveUserProperties
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope"><br>
        ---
        Retrieve a list of properties for the authenticated user. Note that a property will be listed if it's either been created by the authenticated user or the authenticated user has owner privileges (e.g. listed as property-owner, see `properties:owners` scope.
      responses:
        '200':
          $ref: '#/components/responses/200_OK_Properties_Paginated'
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
      tags:
      - UserAPI.UserRelatedEntities
  /api/v1/user/bookings/:
    get:
      operationId: retrieveUserBookings
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Computer Hope">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Computer Hope"><br>
        ---
        Retrieve a list of bookings for the authenticated user. Bookings with all statuses will be listed (e.g. `AWAITING` - meaning that the property requires additional approval for booking and the owner hasn't given it yet).
      responses:
        '200':
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - $ref: '#/components/schemas/Booking'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
      tags:
      - UserAPI.UserRelatedEntities
# USER DOCS
  /api/v1/user/docs/:
    get:
      operationId: listUserDocs
      description: ''
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
      tags:
      - UserAPI.UserAttributes.UserDocs
    post:
      operationId: createUserDocs
      description: ''
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
      tags:
      - UserAPI.UserAttributes.UserDocs
  /api/v1/user/docs/{docs:id}:
    get:
      operationId: retrieveUserDocs
      description: ''
      parameters:
      - name: docs:id
        in: path
        required: true
        description: A unique integer value identifying one billing address.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
      tags:
        - UserAPI.UserAttributes.UserDocs
    patch:
      operationId: patchUserDocs
      description: ''
      parameters:
      - name: docs:id
        in: path
        required: true
        description: A unique integer value identifying one billing address.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
        '404':
          $ref: '#/components/responses/404_Not_Found'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/401BadToken'
                  - $ref: '#/components/schemas/401Unauthorized'
              example:
                errors: [ "Invalid Token : Given token is not valid"
                ]
                status_code: 401
          description: 'Might return 401 Invalid token or 401 Unauthorized, see "Schemas"'
      tags:
      -  UserAPI.UserAttributes.UserDocs
    delete:
      operationId: deleteUserDocs
      description: ''
      parameters:
      - name: docs:id
        in: path
        required: true
        description: A unique integer value identifying one billing address.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserAttributes.UserDocs
# USER BILLING INFO

  /api/v1/user/billing_info/:
    get:
      operationId: listUserAddr
      description: ''
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserAttributes.UserBillingInfo
    post:
      operationId: createUserAddr
      description: ''
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserAttributes.UserBillingInfo
  /api/v1/user/billing_info/{billing_info:id}:
    get:
      operationId: retrieveUserBillingInfo
      description: ''
      parameters:
      - name: billing_info:id
        in: path
        required: true
        description: A unique integer value identifying one billing address.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserAttributes.UserBillingInfo
    patch:
      operationId: patchUserBillingInfo
      description: ''
      parameters:
      - name: billing_info:id
        in: path
        required: true
        description: A unique integer value identifying one billing address.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserAttributes.UserBillingInfo
    delete:
      operationId: deleteUserBillingInfo
      description: ''
      parameters:
      - name: billing_info:id
        in: path
        required: true
        description: A unique integer value identifying one billing address.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserAttributes.UserBillingInfo

# USER PHONES INFO
  /api/v1/user/phones/:
    get:
      deprecated: false
      operationId: retrieveUserPhones
      description: ''
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserAttributes.UserPhones
  /api/v1/user/phones/{phones:id}:
    get:
      operationId: retrieveUserPhone
      description: ''
      parameters:
      - name: phones:id
        in: path
        required: true
        description: A unique integer value identifying one billing address.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserAttributes.UserPhones
    post:
      operationId: createUserPhone
      description: ''
      parameters:
      - name: phones:id
        in: path
        required: true
        description: A unique integer value identifying one billing address.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserAttributes.UserPhones
    patch:
      operationId: patchUserPhone
      description: ''
      parameters:
      - name: phones:id
        in: path
        required: true
        description: A unique integer value identifying one billing address.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserAttributes.UserPhones
    delete:
      operationId: deleteUserPhone
      description: ''
      parameters:
      - name: phones:id
        in: path
        required: true
        description: A unique integer value identifying one billing address.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserAttributes.UserPhones
# USER EMAILS INFO
  /api/v1/user/emails/:
    get:
      operationId: listUserEmails
      description: ''
      responses:
        '200':
          content:
            multipart:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserAttributes.UserEmails
    post:
      operationId: createUserEmails
      description: ''
      responses:
        '200':
          content:
            multipart:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserAttributes.UserEmails
  /api/v1/user/emails/{emails:id}:
    get:
      operationId: retrieveUserEmail
      description: ''
      parameters:
      - name: emails:id
        in: path
        required: true
        description: A unique integer value identifying one billing address.
        schema:
          type: string
      responses:
        '200':
          content:
            multipart:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserAttributes.UserEmails
    patch:
      operationId: patchUserEmail
      description: ''
      parameters:
      - name: emails:id
        in: path
        required: true
        description: A unique integer value identifying one billing address.
        schema:
          type: string
      responses:
        '200':
          content:
            multipart:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserAttributes.UserEmails
    delete:
      operationId: deleteUserEmail
      description: ''
      parameters:
      - name: emails:id
        in: path
        required: true
        description: A unique integer value identifying one billing address.
        schema:
          type: string
      responses:
        '200':
          content:
            multipart:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserAttributes.UserEmails
# USER USERPIC
  /api/v1/user/userpic/:
    put:
      operationId: uploadUserUserPic
      description: ''
      responses:
        '200':
          content:
            multipart:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserAttributes.UserPic
    delete:
      operationId: deleteUserUserPic
      description: ''
      responses:
        '200':
          content:
            multipart:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '400':
          $ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserAttributes.UserPic
# USER ACCOUNT-RELATED INFO
  /api/v1/user/change_password/:
    put:
      operationId: changePassword
      description: |
        <img src="https://icon-library.com/images/completed-icon/completed-icon-6.jpg" width="30" height="30" alt="Completed">
        <img src="https://icon-library.com/images/5752c5f99c.svg.svg" width="30" height="30" alt="Tested">
        ---

        Takes the new password and it's confirmation as well as the old password and
        changes user's password to the new one.
        <br>The request must be sent with a valid access token.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'
      responses:
        '204':
          description: '204 No Content'
        #'400':
          #$ref: '#/components/responses/400_Bad_Request_Property'
      tags:
      - UserAPI.UserAttributes.AccountRelated

components:
  schemas:
    PropertyForUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 50
        body:
          type: string
        price:
          type: number
        active:
          type: boolean
        image:
          type: string
      required:
      - title
      - body
      - price
    Property:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        title:
          type: string
          maxLength: 50
          example: "The Best Property Out There"
        body:
          type: string
          example: "Description of the Best Property"
        price:
          type: number
          example: 999
        creator_id:
          type: integer
          readOnly: true
          example: 1
        active:
          type: boolean
          example: true
        property_type_id:
          type: integer
          enum: [100, 200, 300]
          example: 100
        visibility:
          type: integer
          enum: [100, 200, 300]
          example: 100
        main_image:
          type: string
          readOnly: true
          example: ""
        owners:
          type: array
          items:
            $ref: "#/components/schemas/Owner"
          readOnly: true
        property_address:
          $ref: "#/components/schemas/PropertyAddress"
        property_images:
          type: array
          items:
            $ref: "#/components/schemas/PropertyImageToRepr"
          readOnly: true
        client_greeting_message:
          type: string
          readOnly: false
          example:
            "Some nice message to greet a client."
        created_at:
          type: string
          readOnly: true
          example: "2020-12-19T04:53:34.922814+03:00"
        updated_at:
          type: string
          readOnly: true
          example: "2020-12-19T04:53:34.922814+03:00"
      required:
      - title
      - body
      - price
      - property_address
    Owner:
      type: object
      properties:
        user:
          type: integer
          example: 2
          readOnly: true
        email:
          type: string
          example: "example@test.com"
          readOnly: true
        first_name:
          type: string
          example: "OwnerFirstName"
          readOnly: true
        last_name:
          type: string
          example: "OwnerLastName"
          readOnly: true
        patronymic:
          type: string
          example: "OwnerPatronymic"
          readOnly: true
        is_creator:
          type: boolean
          example: false
        permission_level:
          type: integer
          example: 100
        created_at:
          type: string
          readOnly: true
          example: "2020-12-19T04:53:34.922814+03:00"
        updated_at:
          type: string
          readOnly: true
          example: "2020-12-19T04:53:34.922814+03:00"
    PropertyAddress:
      type: object
      properties:
        country:
          type: string
          example: "Russia"
        city:
          type: string
          example: "Москва"
        street_1:
          type: string
          example: "Таллинская"
        street_2:
          type: string
          example: ""
        building:
          type: string
          example: "34"
        floor:
          type: string
          example: "5"
        number:
          type: string
          example: "520"
        zip_code:
          type: string
          example: "123458"
        directions_description:
          type: string
          example: "Some directions from the nearest metro station or smth."
    PropertyImageToRepr:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        image:
          type: string
          readOnly: true
          example: "http://testserver/media/5500e68537c740898615ad80466d0942.png"
        is_main:
          type: boolean
          readOnly: true
          example: false
        uploaded_at:
          type: string
          readOnly: true
          example: "2020-12-12T20:36:11.567997+03:00"
    Booking:
      type: object
      properties:
        id:
          type: number
          example: 1
          readOnly: true
        booked_property:
          type: array
          readOnly: true
          items:
            $ref: "#/components/schemas/Property"
        number_of_clients:
          type: integer
          example: 1
        client_email:
          type: string
          example: "example@test.com"
        status:
          readOnly: true
          type: string
          enum: ["ACCEPTED", "AWAITING", "DECLINED", "EXPIRED"]
        booked_from:
          type: string
          example: "2020-12-17T00:43:30+03:00"
        booked_until:
          type: string
          example: "2020-12-17T00:43:31+03:00"
        booked_by:
          type: integer
          example: 57
        created_at:
          readOnly: true
          type: string
          example: "2020-12-17T00:43:42.148287+03:00"
        updated_at:
          readOnly: true
          type: string
          example: "2020-12-17T00:43:42.149282+03:00"
      required:
      - number_of_clients
      - client_email
      - booked_from
      - booked_until
    User:
      type: object
      properties:
        id:
          type: number
          example: 1
        username:
          type: string
          example: "janedoe"
        email:
          type: string
          example: "janedoe@test.com"
        userpic:
          type: string
          example: ""
        first_name:
          type: string
          example: "Имя"
        last_name:
          type: string
          example: "Фамилия"
        patronymic:
          type: string
          example: "Отчество"
        bio:
          type: string
          example: "О себе"
        is_confirmed:
          type: boolean
          example: False
        dob:
          type: "string"
          example: "1970-01-01"
        gender:
          type: string
          example: "F"
        is_admin:
          type: boolean
          example: False
        properties_url:
          type: string
          example: "http://testserver/api/v1/user/properties/"
        organisations_url:
          type: string
          example: "http://testserver/api/v1/user/orgs/"
        bookings_url:
          type: string
          example: "http://testserver/api/v1/user/bookings/"
        documents_url:
          type: string
          example: "http://testserver/api/v1/user/docs/"
        billing_addresses_url:
          type: string
          example: "http://testserver/api/v1/user/billing_addresses/"
        phones_url:
          type: string
          example: "http://testserver/api/v1/user/phones/"
        emails_url:
          type: string
          example: "http://testserver/api/v1/user/emails/"
        date_created:
          type: string
          example: "2020-11-25T23:36:11.562947+03:00"
        last_updated:
          type: string
          example: "2020-11-25T23:36:11.562947+03:00"
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
          example: "example@test.com"
        password:
          type: string
          example: "qwerty1234"
          writeOnly: true
      required:
      - username
      - password
    TokenRefresh:
      type: object
      properties:
        refresh:
          type: string
      required:
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
      required:
      - token
    401BadToken:
      description: "Invalid Token. Given token is not valid"
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
          example: [
                  "Invalid Token : Given token is not valid"
                  ]
        status_code:
          type: integer
          example: 401
    401Unauthorized:
      description: "Unauthorized : Authentication not provided."
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
          example: [
                  "Unauthorized : Authentication not provided."
                  ]
        status_code:
          type: integer
          example: 401
    PaginatedResponse:
      type: object
      properties:
        count:
          type: integer
          example: 7
        next:
          type: string
          example: "http://testserver/api/v1/<namespace:list>/?page=4"
        previous:
          type: string
          example: "http://testserver/api/v1/<namespace:list>/?page=2"
    Register:
      type: object
      properties:
        first_name:
          type: string
          writeOnly: true
        last_name:
          type: string
          writeOnly: true
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
      required:
      - first_name
      - last_name
      - password
      - password2
    ChangePassword:
      type: object
      properties:
        old_password:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
  parameters:
    # parameters for regestration and logging
    emailParam:
      name: email
      in: query
      description: Email of the user.
      required: true
      schema:
        type: string
        example: "test@test.com"
    firstNameParam:
      name: first_name
      in: query
      description: First name of the user.
      required: true
      schema:
        type: string
        example: "Jane"
    lastNameParam:
      name: last_name
      in: query
      description: Last of the user.
      required: true
      schema:
        type: string
        example: "Doe"
    passwordParam:
      name: password
      in: query
      description: Password for the user.
      required: true
      schema:
        type: string
        example: "qwerty1234"
    password2Param:
      name: password2
      in: query
      description: Password confirmation for the user.
      required: true
      schema:
        type: string
        example: "querty1234"
  responses:
    200_OK_Patch_User:
      description: Responce was processed
      content:
        application/json:
          schema:
            properties:
              access:
                type: string
                example:
              refresh:
                type: string
                example:
              personal_info:
                properties:
                  id:
                    type: number
                    example: 1
                  username:
                    type: string
                    example: "janedoe"
                  email:
                    type: string
                    example: "janedoe@test.com"
                  userpic:
                    type: string
                    example: ""
                  first_name:
                    type: string
                    example: "Newfirstname"
                  last_name:
                    type: string
                    example: "New-LastName"
                  patronymic:
                    type: string
                    example: "Отчество"
                  bio:
                    type: string
                    example: "О себе"
                  is_confirmed:
                    type: boolean
                    example: False
                  dob:
                    type: "string"
                    example: "1970-01-01"
                  gender:
                    type: string
                    example: "F"
                  is_admin:
                    type: boolean
                    example: False
                  properties_url:
                    type: string
                    example: "http://testserver/api/v1/user/properties/"
                  organisations_url:
                    type: string
                    example: "http://testserver/api/v1/user/orgs/"
                  bookings_url:
                    type: string
                    example: "http://testserver/api/v1/user/bookings/"
                  documents_url:
                    type: string
                    example: "http://testserver/api/v1/user/docs/"
                  billing_addresses_url:
                    type: string
                    example: "http://testserver/api/v1/user/billing_addresses/"
                  phones_url:
                    type: string
                    example: "http://testserver/api/v1/user/phones/"
                  emails_url:
                    type: string
                    example: "http://testserver/api/v1/user/emails/"
                  date_created:
                    type: string
                    example: "2020-11-25T23:36:11.562947+03:00"
                  last_updated:
                    type: string
                    example: "2020-11-25T23:36:11.562947+03:00"
    200_OK_Properties_Paginated:
      description: Responce was processed
      content:
        application/json:
          schema:
            properties:
              count:
                type: integer
                example: 7
              next:
                type: string
                example: "http://testserver/api/v1/properties/?page=4"
              previous:
                type: string
                example: "http://testserver/api/v1/properties/?page=2"
              results:
                  type: array
                  items:
                    $ref: "#/components/schemas/Property"

    200_OK:
      description: Responce was processed
      content:
        application/json:
          schema:
            properties:
              access:
                type: string
                example:
              refresh:
                type: string
                example:
              personal_info:
                properties:
                  id:
                    type: number
                    example: 1
                  username:
                    type: string
                    example: "janedoe"
                  email:
                    type: string
                    example: "janedoe@test.com"
                  userpic:
                    type: string
                    example: ""
                  first_name:
                    type: string
                    example: "Имя"
                  last_name:
                    type: string
                    example: "Фамилия"
                  patronymic:
                    type: string
                    example: "Отчество"
                  bio:
                    type: string
                    example: "О себе"
                  is_confirmed:
                    type: boolean
                    example: False
                  dob:
                    type: "string"
                    example: "1970-01-01"
                  gender:
                    type: string
                    example: "F"
                  is_admin:
                    type: boolean
                    example: False
                  properties_url:
                    type: string
                    example: "http://testserver/api/v1/user/properties/"
                  organisations_url:
                    type: string
                    example: "http://testserver/api/v1/user/orgs/"
                  bookings_url:
                    type: string
                    example: "http://testserver/api/v1/user/bookings/"
                  documents_url:
                    type: string
                    example: "http://testserver/api/v1/user/docs/"
                  billing_addresses_url:
                    type: string
                    example: "http://testserver/api/v1/user/billing_addresses/"
                  phones_url:
                    type: string
                    example: "http://testserver/api/v1/user/phones/"
                  emails_url:
                    type: string
                    example: "http://testserver/api/v1/user/emails/"
                  date_created:
                    type: string
                    example: "2020-11-25T23:36:11.562947+03:00"
                  last_updated:
                    type: string
                    example: "2020-11-25T23:36:11.562947+03:00"
    404_Not_Found:
      description: "404 not found: resource doesn't exist."
      content:
        application/json:
          schema:
            properties:
              errors:
                type: array
                example: [
                  "Not Found : Resource does not exist"
                  ]
              status_code:
                type: integer
                example: 404
    403_Forbidden:
      description: "403 Forbidden : You do not have necessary permissions"
      content:
        application/json:
          schema:
            properties:
              errors:
                type: array
                example: [
                  "Forbidden : You do not have necessary permissions"
                  ]
              status_code:
                type: integer
                example: 403
    422_Invalid_Data_Property:
      description: "Invalid Data : Invalid data has been submitted"
      content:
        application/json:
          schema:
            properties:
              errors:
                type: array
                example: [
                  "price : price parameter cannot be negative"
                  ]
              status_code:
                type: integer
                example: 422
    422_Invalid_Data:
      description: "Invalid Data : Invalid data has been submitted"
      content:
        application/json:
          schema:
            properties:
              errors:
                type: array
                example: [
                  "InvalidData : Invalid data has been submitted"
                ]
              status_code:
                type: integer
                example: 422
    400_Bad_Request_Property:
      description: "400 Bad request"
      content:
        application/json:
          schema:
            properties:
              errors:
                type: array
                example: [
                  "Bad Request : Request was malformed or data was unacceptable. Try again with changed request."
                  ]
              status_code:
                type: integer
                example: 400
    204_Deleted:
      description: "204 No Content"
      content:
        application/json:
          schema:
            properties:
              status_code:
                type: integer
                example: 204

tags:
  - name: UserAPI
    description: "General Endpoints for the authenticated user."
    externalDocs:
      url: google.com
  - name: UserAPI.UserRelatedEntities
    description: "Endpoints for the related entites of the authenticated user such as bookings or organisations."
  - name: UserAPI.UserAttributes.UserBillingInfo
    description: "Endpoints for billing info of the authenticated user."
  - name: UserAPI.UserAttributes.UserEmails
    description: "Endpoints for emails of the authenticated user."
  - name: UserAPI.UserAttributes.UserDocs
    description: "Endpoints for documents of the authenticated user."
  - name: UserAPI.UserAttributes.UserPhones
    description: "Endpoints for phones of the authenticated user."
  - name: UserAPI.UserAttributes.UserPic
    description: "Endpoints for userpic of the authenticated user."
  - name: UserAPI.UserAttributes.AccountRelated
    description: "Endpoints for account-related endpoints of the authenticated user, such as changing password."
  - name: PropertiesAPI
    description: "General Endpoints for dealing with properties."
  - name: PropertiesAPI.PropertyAttributes.Bookings
    description: "Endpoint for managing bookings. Available only for property owners."
  - name: PropertiesAPI.PropertyAttributes.Owners
    description: "Endpoint for managing owners. Available only for property owners with permission level 400."
  - name: PropertiesAPI.PropertyAttributes.Images
    description: "Endpoint for managing images for a property. Available only for property owners."
  #- name: PropertiesAPI.PropertyAttributes.Locks
  #  description: "Endpoint for managing locks for a property. Available only for property owners with permission levels of 300 or 400."
  #- name: PropertiesAPI.PropertyAttributes.Availability
  #  description: "Endpoint for accessing a property availablility. Available only for all authenticated users."
  - name: UsersAPI
    description: "Admin-only scope of endpoints."
  - name: AuthAPI
    description: "Endpoints for authentication-related requests."